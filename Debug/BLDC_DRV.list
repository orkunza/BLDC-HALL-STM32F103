
BLDC_DRV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006408  08006408  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006408  08006408  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006408  08006408  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  2000000c  0800641c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  0800641c  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003dabc  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da7  00000000  00000000  0005daf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029b8  00000000  00000000  00061898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027d8  00000000  00000000  00064250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4f9  00000000  00000000  00066a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d784  00000000  00000000  00080f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1255  00000000  00000000  0009e6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f8fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b458  00000000  00000000  0013f94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005e98 	.word	0x08005e98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08005e98 	.word	0x08005e98

0800014c <motorstartinit>:
	B_DOWN_PWM_STOP;
	C_DOWN_PWM_STOP;
}

void motorstartinit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	//htim1.Instance->CCER = 0;
	//HAL_TIM_Base_Start(&htim1);
	A_DOWN_PWM_STOP;
 8000150:	2100      	movs	r1, #0
 8000152:	4808      	ldr	r0, [pc, #32]	; (8000174 <motorstartinit+0x28>)
 8000154:	f004 fffc 	bl	8005150 <HAL_TIM_PWM_Stop>
	B_DOWN_PWM_STOP;
 8000158:	2104      	movs	r1, #4
 800015a:	4806      	ldr	r0, [pc, #24]	; (8000174 <motorstartinit+0x28>)
 800015c:	f004 fff8 	bl	8005150 <HAL_TIM_PWM_Stop>
	C_DOWN_PWM_STOP;
 8000160:	2108      	movs	r1, #8
 8000162:	4804      	ldr	r0, [pc, #16]	; (8000174 <motorstartinit+0x28>)
 8000164:	f004 fff4 	bl	8005150 <HAL_TIM_PWM_Stop>

	HallSensorsGetPosition();
 8000168:	f000 f824 	bl	80001b4 <HallSensorsGetPosition>
	commutate();
 800016c:	f000 f868 	bl	8000240 <commutate>

	//__HAL_TIM_MOE_ENABLE(&htim1);
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	200000ac 	.word	0x200000ac

08000178 <adc_to_pwm>:



uint16_t adc_to_pwm(uint16_t adc_raw)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	4603      	mov	r3, r0
 8000180:	80fb      	strh	r3, [r7, #6]
	uint16_t result = adc_raw * BLDC_CHOPPER_PERIOD / 4096;
 8000182:	88fb      	ldrh	r3, [r7, #6]
 8000184:	f241 1294 	movw	r2, #4500	; 0x1194
 8000188:	fb02 f303 	mul.w	r3, r2, r3
 800018c:	2b00      	cmp	r3, #0
 800018e:	da01      	bge.n	8000194 <adc_to_pwm+0x1c>
 8000190:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000194:	131b      	asrs	r3, r3, #12
 8000196:	81fb      	strh	r3, [r7, #14]
	if (result > BLDC_CHOPPER_PERIOD)
 8000198:	89fb      	ldrh	r3, [r7, #14]
 800019a:	f241 1294 	movw	r2, #4500	; 0x1194
 800019e:	4293      	cmp	r3, r2
 80001a0:	d902      	bls.n	80001a8 <adc_to_pwm+0x30>
	{
		result = BLDC_CHOPPER_PERIOD;
 80001a2:	f241 1394 	movw	r3, #4500	; 0x1194
 80001a6:	81fb      	strh	r3, [r7, #14]
	}
	return result;
 80001a8:	89fb      	ldrh	r3, [r7, #14]
}
 80001aa:	4618      	mov	r0, r3
 80001ac:	3714      	adds	r7, #20
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <HallSensorsGetPosition>:

void HallSensorsGetPosition(void) {
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	hallpos = (uint8_t) ((GPIOB->IDR & (H1_Pin | H2_Pin | H3_Pin)) >> 7); //0x0080 0x0100 0x0200
 80001b8:	4b1e      	ldr	r3, [pc, #120]	; (8000234 <HallSensorsGetPosition+0x80>)
 80001ba:	689b      	ldr	r3, [r3, #8]
 80001bc:	09db      	lsrs	r3, r3, #7
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	f003 0307 	and.w	r3, r3, #7
 80001c4:	b2da      	uxtb	r2, r3
 80001c6:	4b1c      	ldr	r3, [pc, #112]	; (8000238 <HallSensorsGetPosition+0x84>)
 80001c8:	701a      	strb	r2, [r3, #0]
	switch (hallpos) {
 80001ca:	4b1b      	ldr	r3, [pc, #108]	; (8000238 <HallSensorsGetPosition+0x84>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	2b05      	cmp	r3, #5
 80001d2:	d827      	bhi.n	8000224 <HallSensorsGetPosition+0x70>
 80001d4:	a201      	add	r2, pc, #4	; (adr r2, 80001dc <HallSensorsGetPosition+0x28>)
 80001d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001da:	bf00      	nop
 80001dc:	080001fd 	.word	0x080001fd
 80001e0:	0800020d 	.word	0x0800020d
 80001e4:	08000205 	.word	0x08000205
 80001e8:	0800021d 	.word	0x0800021d
 80001ec:	080001f5 	.word	0x080001f5
 80001f0:	08000215 	.word	0x08000215
	case 0b101:
		phase = 1;
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <HallSensorsGetPosition+0x88>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	701a      	strb	r2, [r3, #0]
		break;
 80001fa:	e017      	b.n	800022c <HallSensorsGetPosition+0x78>
	case 0b001:
		phase = 2;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <HallSensorsGetPosition+0x88>)
 80001fe:	2202      	movs	r2, #2
 8000200:	701a      	strb	r2, [r3, #0]
		break;
 8000202:	e013      	b.n	800022c <HallSensorsGetPosition+0x78>
	case 0b011:
		phase = 3;
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <HallSensorsGetPosition+0x88>)
 8000206:	2203      	movs	r2, #3
 8000208:	701a      	strb	r2, [r3, #0]
		break;
 800020a:	e00f      	b.n	800022c <HallSensorsGetPosition+0x78>
	case 0b010:
		phase = 4;
 800020c:	4b0b      	ldr	r3, [pc, #44]	; (800023c <HallSensorsGetPosition+0x88>)
 800020e:	2204      	movs	r2, #4
 8000210:	701a      	strb	r2, [r3, #0]
		break;
 8000212:	e00b      	b.n	800022c <HallSensorsGetPosition+0x78>
	case 0b110:
		phase = 5;
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <HallSensorsGetPosition+0x88>)
 8000216:	2205      	movs	r2, #5
 8000218:	701a      	strb	r2, [r3, #0]
		break;
 800021a:	e007      	b.n	800022c <HallSensorsGetPosition+0x78>
	case 0b100:
		phase = 6;
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <HallSensorsGetPosition+0x88>)
 800021e:	2206      	movs	r2, #6
 8000220:	701a      	strb	r2, [r3, #0]
		break;
 8000222:	e003      	b.n	800022c <HallSensorsGetPosition+0x78>

	default:
		phase = 0;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <HallSensorsGetPosition+0x88>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]
		break;
 800022a:	bf00      	nop
	}
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	40010c00 	.word	0x40010c00
 8000238:	200001cc 	.word	0x200001cc
 800023c:	200001d2 	.word	0x200001d2

08000240 <commutate>:

void commutate()
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	//     60    120    180  240   300    360  Angle
	//     010   011    001  101   100    110  Hall_Sensor
	//     2     3      1    5     4      6
	//     c     b      a    f     d      e    Vektor

	switch (phase) {
 8000244:	4b78      	ldr	r3, [pc, #480]	; (8000428 <commutate+0x1e8>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b06      	cmp	r3, #6
 800024a:	f200 80ea 	bhi.w	8000422 <commutate+0x1e2>
 800024e:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <commutate+0x14>)
 8000250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000254:	08000271 	.word	0x08000271
 8000258:	080002af 	.word	0x080002af
 800025c:	080002ed 	.word	0x080002ed
 8000260:	0800032b 	.word	0x0800032b
 8000264:	08000369 	.word	0x08000369
 8000268:	080003a7 	.word	0x080003a7
 800026c:	080003e5 	.word	0x080003e5

	case 0:
		A_UP_LOW;
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000276:	486d      	ldr	r0, [pc, #436]	; (800042c <commutate+0x1ec>)
 8000278:	f003 fc9f 	bl	8003bba <HAL_GPIO_WritePin>
		B_UP_LOW;
 800027c:	2200      	movs	r2, #0
 800027e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000282:	486a      	ldr	r0, [pc, #424]	; (800042c <commutate+0x1ec>)
 8000284:	f003 fc99 	bl	8003bba <HAL_GPIO_WritePin>
		C_UP_LOW;
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800028e:	4867      	ldr	r0, [pc, #412]	; (800042c <commutate+0x1ec>)
 8000290:	f003 fc93 	bl	8003bba <HAL_GPIO_WritePin>
		A_DOWN_PWM_STOP;   	//        U V W   Hall
 8000294:	2100      	movs	r1, #0
 8000296:	4866      	ldr	r0, [pc, #408]	; (8000430 <commutate+0x1f0>)
 8000298:	f004 ff5a 	bl	8005150 <HAL_TIM_PWM_Stop>
		B_DOWN_PWM_STOP;   	//0       0 0 0
 800029c:	2104      	movs	r1, #4
 800029e:	4864      	ldr	r0, [pc, #400]	; (8000430 <commutate+0x1f0>)
 80002a0:	f004 ff56 	bl	8005150 <HAL_TIM_PWM_Stop>
		C_DOWN_PWM_STOP;   	//        0 0 0
 80002a4:	2108      	movs	r1, #8
 80002a6:	4862      	ldr	r0, [pc, #392]	; (8000430 <commutate+0x1f0>)
 80002a8:	f004 ff52 	bl	8005150 <HAL_TIM_PWM_Stop>
		break;
 80002ac:	e0b9      	b.n	8000422 <commutate+0x1e2>
	case 1:
		A_UP_HIGH;
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b4:	485d      	ldr	r0, [pc, #372]	; (800042c <commutate+0x1ec>)
 80002b6:	f003 fc80 	bl	8003bba <HAL_GPIO_WritePin>
		B_UP_LOW;
 80002ba:	2200      	movs	r2, #0
 80002bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002c0:	485a      	ldr	r0, [pc, #360]	; (800042c <commutate+0x1ec>)
 80002c2:	f003 fc7a 	bl	8003bba <HAL_GPIO_WritePin>
		C_UP_HIGH;
 80002c6:	2201      	movs	r2, #1
 80002c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002cc:	4857      	ldr	r0, [pc, #348]	; (800042c <commutate+0x1ec>)
 80002ce:	f003 fc74 	bl	8003bba <HAL_GPIO_WritePin>
		A_DOWN_PWM_START;
 80002d2:	2100      	movs	r1, #0
 80002d4:	4856      	ldr	r0, [pc, #344]	; (8000430 <commutate+0x1f0>)
 80002d6:	f004 fe99 	bl	800500c <HAL_TIM_PWM_Start>
		B_DOWN_PWM_STOP;
 80002da:	2104      	movs	r1, #4
 80002dc:	4854      	ldr	r0, [pc, #336]	; (8000430 <commutate+0x1f0>)
 80002de:	f004 ff37 	bl	8005150 <HAL_TIM_PWM_Stop>
		C_DOWN_PWM_STOP;
 80002e2:	2108      	movs	r1, #8
 80002e4:	4852      	ldr	r0, [pc, #328]	; (8000430 <commutate+0x1f0>)
 80002e6:	f004 ff33 	bl	8005150 <HAL_TIM_PWM_Stop>
		break;
 80002ea:	e09a      	b.n	8000422 <commutate+0x1e2>
	case 2:
		A_UP_LOW;
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f2:	484e      	ldr	r0, [pc, #312]	; (800042c <commutate+0x1ec>)
 80002f4:	f003 fc61 	bl	8003bba <HAL_GPIO_WritePin>
		B_UP_LOW;
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002fe:	484b      	ldr	r0, [pc, #300]	; (800042c <commutate+0x1ec>)
 8000300:	f003 fc5b 	bl	8003bba <HAL_GPIO_WritePin>
		C_UP_HIGH;
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030a:	4848      	ldr	r0, [pc, #288]	; (800042c <commutate+0x1ec>)
 800030c:	f003 fc55 	bl	8003bba <HAL_GPIO_WritePin>
		A_DOWN_PWM_START;
 8000310:	2100      	movs	r1, #0
 8000312:	4847      	ldr	r0, [pc, #284]	; (8000430 <commutate+0x1f0>)
 8000314:	f004 fe7a 	bl	800500c <HAL_TIM_PWM_Start>
		B_DOWN_PWM_STOP;
 8000318:	2104      	movs	r1, #4
 800031a:	4845      	ldr	r0, [pc, #276]	; (8000430 <commutate+0x1f0>)
 800031c:	f004 ff18 	bl	8005150 <HAL_TIM_PWM_Stop>
		C_DOWN_PWM_STOP;
 8000320:	2108      	movs	r1, #8
 8000322:	4843      	ldr	r0, [pc, #268]	; (8000430 <commutate+0x1f0>)
 8000324:	f004 ff14 	bl	8005150 <HAL_TIM_PWM_Stop>
		break;
 8000328:	e07b      	b.n	8000422 <commutate+0x1e2>
	case 3:
		A_UP_LOW;
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000330:	483e      	ldr	r0, [pc, #248]	; (800042c <commutate+0x1ec>)
 8000332:	f003 fc42 	bl	8003bba <HAL_GPIO_WritePin>
		B_UP_LOW;
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800033c:	483b      	ldr	r0, [pc, #236]	; (800042c <commutate+0x1ec>)
 800033e:	f003 fc3c 	bl	8003bba <HAL_GPIO_WritePin>
		C_UP_HIGH;
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000348:	4838      	ldr	r0, [pc, #224]	; (800042c <commutate+0x1ec>)
 800034a:	f003 fc36 	bl	8003bba <HAL_GPIO_WritePin>
		A_DOWN_PWM_STOP;
 800034e:	2100      	movs	r1, #0
 8000350:	4837      	ldr	r0, [pc, #220]	; (8000430 <commutate+0x1f0>)
 8000352:	f004 fefd 	bl	8005150 <HAL_TIM_PWM_Stop>
		B_DOWN_PWM_START;
 8000356:	2104      	movs	r1, #4
 8000358:	4835      	ldr	r0, [pc, #212]	; (8000430 <commutate+0x1f0>)
 800035a:	f004 fe57 	bl	800500c <HAL_TIM_PWM_Start>
		C_DOWN_PWM_STOP;
 800035e:	2108      	movs	r1, #8
 8000360:	4833      	ldr	r0, [pc, #204]	; (8000430 <commutate+0x1f0>)
 8000362:	f004 fef5 	bl	8005150 <HAL_TIM_PWM_Stop>
		break;
 8000366:	e05c      	b.n	8000422 <commutate+0x1e2>
	case 4:
		A_UP_HIGH;
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036e:	482f      	ldr	r0, [pc, #188]	; (800042c <commutate+0x1ec>)
 8000370:	f003 fc23 	bl	8003bba <HAL_GPIO_WritePin>
		B_UP_LOW;
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800037a:	482c      	ldr	r0, [pc, #176]	; (800042c <commutate+0x1ec>)
 800037c:	f003 fc1d 	bl	8003bba <HAL_GPIO_WritePin>
		C_UP_LOW;
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000386:	4829      	ldr	r0, [pc, #164]	; (800042c <commutate+0x1ec>)
 8000388:	f003 fc17 	bl	8003bba <HAL_GPIO_WritePin>
		A_DOWN_PWM_STOP;
 800038c:	2100      	movs	r1, #0
 800038e:	4828      	ldr	r0, [pc, #160]	; (8000430 <commutate+0x1f0>)
 8000390:	f004 fede 	bl	8005150 <HAL_TIM_PWM_Stop>
		B_DOWN_PWM_START;
 8000394:	2104      	movs	r1, #4
 8000396:	4826      	ldr	r0, [pc, #152]	; (8000430 <commutate+0x1f0>)
 8000398:	f004 fe38 	bl	800500c <HAL_TIM_PWM_Start>
		C_DOWN_PWM_STOP;
 800039c:	2108      	movs	r1, #8
 800039e:	4824      	ldr	r0, [pc, #144]	; (8000430 <commutate+0x1f0>)
 80003a0:	f004 fed6 	bl	8005150 <HAL_TIM_PWM_Stop>
		break;
 80003a4:	e03d      	b.n	8000422 <commutate+0x1e2>
	case 5:
		A_UP_HIGH;
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ac:	481f      	ldr	r0, [pc, #124]	; (800042c <commutate+0x1ec>)
 80003ae:	f003 fc04 	bl	8003bba <HAL_GPIO_WritePin>
		B_UP_LOW;
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003b8:	481c      	ldr	r0, [pc, #112]	; (800042c <commutate+0x1ec>)
 80003ba:	f003 fbfe 	bl	8003bba <HAL_GPIO_WritePin>
		C_UP_LOW;
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c4:	4819      	ldr	r0, [pc, #100]	; (800042c <commutate+0x1ec>)
 80003c6:	f003 fbf8 	bl	8003bba <HAL_GPIO_WritePin>
		A_DOWN_PWM_STOP;
 80003ca:	2100      	movs	r1, #0
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <commutate+0x1f0>)
 80003ce:	f004 febf 	bl	8005150 <HAL_TIM_PWM_Stop>
		B_DOWN_PWM_STOP;
 80003d2:	2104      	movs	r1, #4
 80003d4:	4816      	ldr	r0, [pc, #88]	; (8000430 <commutate+0x1f0>)
 80003d6:	f004 febb 	bl	8005150 <HAL_TIM_PWM_Stop>
		C_DOWN_PWM_START;
 80003da:	2108      	movs	r1, #8
 80003dc:	4814      	ldr	r0, [pc, #80]	; (8000430 <commutate+0x1f0>)
 80003de:	f004 fe15 	bl	800500c <HAL_TIM_PWM_Start>
		break;
 80003e2:	e01e      	b.n	8000422 <commutate+0x1e2>
	case 6:
		A_UP_LOW;
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ea:	4810      	ldr	r0, [pc, #64]	; (800042c <commutate+0x1ec>)
 80003ec:	f003 fbe5 	bl	8003bba <HAL_GPIO_WritePin>
		B_UP_HIGH;
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003f6:	480d      	ldr	r0, [pc, #52]	; (800042c <commutate+0x1ec>)
 80003f8:	f003 fbdf 	bl	8003bba <HAL_GPIO_WritePin>
		C_UP_LOW;
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000402:	480a      	ldr	r0, [pc, #40]	; (800042c <commutate+0x1ec>)
 8000404:	f003 fbd9 	bl	8003bba <HAL_GPIO_WritePin>
		A_DOWN_PWM_STOP;
 8000408:	2100      	movs	r1, #0
 800040a:	4809      	ldr	r0, [pc, #36]	; (8000430 <commutate+0x1f0>)
 800040c:	f004 fea0 	bl	8005150 <HAL_TIM_PWM_Stop>
		B_DOWN_PWM_STOP;
 8000410:	2104      	movs	r1, #4
 8000412:	4807      	ldr	r0, [pc, #28]	; (8000430 <commutate+0x1f0>)
 8000414:	f004 fe9c 	bl	8005150 <HAL_TIM_PWM_Stop>
		C_DOWN_PWM_START;
 8000418:	2108      	movs	r1, #8
 800041a:	4805      	ldr	r0, [pc, #20]	; (8000430 <commutate+0x1f0>)
 800041c:	f004 fdf6 	bl	800500c <HAL_TIM_PWM_Start>
		break;
 8000420:	bf00      	nop
	} // end of phase switch statement
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200001d2 	.word	0x200001d2
 800042c:	40010c00 	.word	0x40010c00
 8000430:	200000ac 	.word	0x200000ac

08000434 <HAL_GPIO_EXTI_Callback>:
extern uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg,
		uint8_t arg_int, void *arg_ptr);
static u8g2_t u8g2;

/* HALL interrupt */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	80fb      	strh	r3, [r7, #6]

	if ((GPIO_Pin == H1_Pin || GPIO_Pin == H2_Pin || GPIO_Pin == H3_Pin)
 800043e:	88fb      	ldrh	r3, [r7, #6]
 8000440:	2b80      	cmp	r3, #128	; 0x80
 8000442:	d007      	beq.n	8000454 <HAL_GPIO_EXTI_Callback+0x20>
 8000444:	88fb      	ldrh	r3, [r7, #6]
 8000446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800044a:	d003      	beq.n	8000454 <HAL_GPIO_EXTI_Callback+0x20>
 800044c:	88fb      	ldrh	r3, [r7, #6]
 800044e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000452:	d101      	bne.n	8000458 <HAL_GPIO_EXTI_Callback+0x24>
 8000454:	2301      	movs	r3, #1
 8000456:	e000      	b.n	800045a <HAL_GPIO_EXTI_Callback+0x26>
 8000458:	2300      	movs	r3, #0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d01b      	beq.n	8000496 <HAL_GPIO_EXTI_Callback+0x62>
			!= RESET) {
		__HAL_GPIO_EXTI_CLEAR_IT(H1_Pin);
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000460:	2280      	movs	r2, #128	; 0x80
 8000462:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(H2_Pin);
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800046a:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(H3_Pin);
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_GPIO_EXTI_Callback+0x6c>)
 800046e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000472:	615a      	str	r2, [r3, #20]

		// calc speed
		speed_raw = __HAL_TIM_GET_COUNTER(&htim3);
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <HAL_GPIO_EXTI_Callback+0x74>)
 800047e:	801a      	strh	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8000480:	4808      	ldr	r0, [pc, #32]	; (80004a4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000482:	f004 fd21 	bl	8004ec8 <HAL_TIM_Base_Start_IT>
		__HAL_TIM_SET_COUNTER(&htim3,0);
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	; 0x24

		// Commutation
		HallSensorsGetPosition();
 800048e:	f7ff fe91 	bl	80001b4 <HallSensorsGetPosition>
		commutate();
 8000492:	f7ff fed5 	bl	8000240 <commutate>
	}
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40010400 	.word	0x40010400
 80004a4:	2000013c 	.word	0x2000013c
 80004a8:	200001d4 	.word	0x200001d4

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b2:	f002 fd2d 	bl	8002f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b6:	f000 f8c9 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ba:	f000 fb55 	bl	8000b68 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004be:	f000 f98d 	bl	80007dc <MX_TIM1_Init>
  MX_I2C2_Init();
 80004c2:	f000 f95d 	bl	8000780 <MX_I2C2_Init>
  MX_TIM3_Init();
 80004c6:	f000 faad 	bl	8000a24 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004ca:	f000 faff 	bl	8000acc <MX_TIM4_Init>
  MX_TIM2_Init();
 80004ce:	f000 fa35 	bl	800093c <MX_TIM2_Init>
  MX_ADC1_Init();
 80004d2:	f000 f917 	bl	8000704 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  	/* TIM init */
  	HAL_TIM_Base_Start_IT(&htim1);
 80004d6:	484e      	ldr	r0, [pc, #312]	; (8000610 <main+0x164>)
 80004d8:	f004 fcf6 	bl	8004ec8 <HAL_TIM_Base_Start_IT>

	/* ADC init */
  	HAL_ADC_Start(&hadc1);
 80004dc:	484d      	ldr	r0, [pc, #308]	; (8000614 <main+0x168>)
 80004de:	f002 fe75 	bl	80031cc <HAL_ADC_Start>

	/* Starting point */
	HallSensorsGetPosition();
 80004e2:	f7ff fe67 	bl	80001b4 <HallSensorsGetPosition>

	/* Buzzer off */
	BUZZER_SET_DUTY = 49; // when 99 is %100
 80004e6:	4b4c      	ldr	r3, [pc, #304]	; (8000618 <main+0x16c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2231      	movs	r2, #49	; 0x31
 80004ec:	635a      	str	r2, [r3, #52]	; 0x34
	Buzzer_Beep_Beep();
 80004ee:	f000 fc1d 	bl	8000d2c <Buzzer_Beep_Beep>

	/* Motor start init */
	motorstartinit();
 80004f2:	f7ff fe2b 	bl	800014c <motorstartinit>
	phase = 0;
 80004f6:	4b49      	ldr	r3, [pc, #292]	; (800061c <main+0x170>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	/* OLED init */
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0,u8x8_byte_stm32_hw_i2c, u8x8_stm32_gpio_and_delay);
 80004fc:	4b48      	ldr	r3, [pc, #288]	; (8000620 <main+0x174>)
 80004fe:	4a49      	ldr	r2, [pc, #292]	; (8000624 <main+0x178>)
 8000500:	4949      	ldr	r1, [pc, #292]	; (8000628 <main+0x17c>)
 8000502:	484a      	ldr	r0, [pc, #296]	; (800062c <main+0x180>)
 8000504:	f001 f810 	bl	8001528 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	/* Initialize Display */
	u8g2_InitDisplay(&u8g2);
 8000508:	4848      	ldr	r0, [pc, #288]	; (800062c <main+0x180>)
 800050a:	f002 fc3a 	bl	8002d82 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 800050e:	2100      	movs	r1, #0
 8000510:	4846      	ldr	r0, [pc, #280]	; (800062c <main+0x180>)
 8000512:	f002 fc45 	bl	8002da0 <u8x8_SetPowerSave>
//		if (adc_raw < 100)
//			HAL_TIM_Base_Stop(&htim1);


		//* OLED Display Things *//
		u8g2_FirstPage(&u8g2);
 8000516:	4845      	ldr	r0, [pc, #276]	; (800062c <main+0x180>)
 8000518:	f000 ffb4 	bl	8001484 <u8g2_FirstPage>
		do {
			u8g2_ClearBuffer(&u8g2);
 800051c:	4843      	ldr	r0, [pc, #268]	; (800062c <main+0x180>)
 800051e:	f000 ff26 	bl	800136e <u8g2_ClearBuffer>

			u8g2_SetDrawColor(&u8g2, 1);
 8000522:	2101      	movs	r1, #1
 8000524:	4841      	ldr	r0, [pc, #260]	; (800062c <main+0x180>)
 8000526:	f001 fe9a 	bl	800225e <u8g2_SetDrawColor>
			u8g2_SetBitmapMode(&u8g2, 1);
 800052a:	2101      	movs	r1, #1
 800052c:	483f      	ldr	r0, [pc, #252]	; (800062c <main+0x180>)
 800052e:	f000 fed9 	bl	80012e4 <u8g2_SetBitmapMode>

			if ((hallpos & 0x01))
 8000532:	4b3f      	ldr	r3, [pc, #252]	; (8000630 <main+0x184>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	2b00      	cmp	r3, #0
 800053c:	d007      	beq.n	800054e <main+0xa2>
				u8g2_DrawBox(&u8g2, 30, 15, 15, 15);
 800053e:	230f      	movs	r3, #15
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	230f      	movs	r3, #15
 8000544:	220f      	movs	r2, #15
 8000546:	211e      	movs	r1, #30
 8000548:	4838      	ldr	r0, [pc, #224]	; (800062c <main+0x180>)
 800054a:	f000 feda 	bl	8001302 <u8g2_DrawBox>
			if ((hallpos >> 1) & 0x01)
 800054e:	4b38      	ldr	r3, [pc, #224]	; (8000630 <main+0x184>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	085b      	lsrs	r3, r3, #1
 8000554:	b2db      	uxtb	r3, r3
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d007      	beq.n	800056e <main+0xc2>
				u8g2_DrawBox(&u8g2, 60, 15, 15, 15);
 800055e:	230f      	movs	r3, #15
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	230f      	movs	r3, #15
 8000564:	220f      	movs	r2, #15
 8000566:	213c      	movs	r1, #60	; 0x3c
 8000568:	4830      	ldr	r0, [pc, #192]	; (800062c <main+0x180>)
 800056a:	f000 feca 	bl	8001302 <u8g2_DrawBox>
			if ((hallpos >> 2) & 0x01)
 800056e:	4b30      	ldr	r3, [pc, #192]	; (8000630 <main+0x184>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	089b      	lsrs	r3, r3, #2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d007      	beq.n	800058e <main+0xe2>
				u8g2_DrawBox(&u8g2, 90, 15, 15, 15);
 800057e:	230f      	movs	r3, #15
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	230f      	movs	r3, #15
 8000584:	220f      	movs	r2, #15
 8000586:	215a      	movs	r1, #90	; 0x5a
 8000588:	4828      	ldr	r0, [pc, #160]	; (800062c <main+0x180>)
 800058a:	f000 feba 	bl	8001302 <u8g2_DrawBox>

			u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 800058e:	4929      	ldr	r1, [pc, #164]	; (8000634 <main+0x188>)
 8000590:	4826      	ldr	r0, [pc, #152]	; (800062c <main+0x180>)
 8000592:	f001 fd59 	bl	8002048 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 30, 50, "H1");
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <main+0x18c>)
 8000598:	2232      	movs	r2, #50	; 0x32
 800059a:	211e      	movs	r1, #30
 800059c:	4823      	ldr	r0, [pc, #140]	; (800062c <main+0x180>)
 800059e:	f001 fcb5 	bl	8001f0c <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 60, 50, "H2");
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <main+0x190>)
 80005a4:	2232      	movs	r2, #50	; 0x32
 80005a6:	213c      	movs	r1, #60	; 0x3c
 80005a8:	4820      	ldr	r0, [pc, #128]	; (800062c <main+0x180>)
 80005aa:	f001 fcaf 	bl	8001f0c <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 90, 50, "H3");
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <main+0x194>)
 80005b0:	2232      	movs	r2, #50	; 0x32
 80005b2:	215a      	movs	r1, #90	; 0x5a
 80005b4:	481d      	ldr	r0, [pc, #116]	; (800062c <main+0x180>)
 80005b6:	f001 fca9 	bl	8001f0c <u8g2_DrawStr>

		} while (u8g2_NextPage(&u8g2));
 80005ba:	481c      	ldr	r0, [pc, #112]	; (800062c <main+0x180>)
 80005bc:	f000 ff76 	bl	80014ac <u8g2_NextPage>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1aa      	bne.n	800051c <main+0x70>

		//* LED Toggle *//
		GPIOB->BSRR |= (1 << 0);		 // Set the Pin PB0
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <main+0x198>)
 80005c8:	691b      	ldr	r3, [r3, #16]
 80005ca:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <main+0x198>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6113      	str	r3, [r2, #16]
		HAL_Delay(200);
 80005d2:	20c8      	movs	r0, #200	; 0xc8
 80005d4:	f002 fcfe 	bl	8002fd4 <HAL_Delay>
		GPIOB->BSRR |= (1 << 0) << 16;  // Clear the Pin PB0
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <main+0x198>)
 80005da:	691b      	ldr	r3, [r3, #16]
 80005dc:	4a19      	ldr	r2, [pc, #100]	; (8000644 <main+0x198>)
 80005de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005e2:	6113      	str	r3, [r2, #16]
		HAL_Delay(200);
 80005e4:	20c8      	movs	r0, #200	; 0xc8
 80005e6:	f002 fcf5 	bl	8002fd4 <HAL_Delay>

		//* Buzzer Off *//
		if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin)){
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	4816      	ldr	r0, [pc, #88]	; (8000648 <main+0x19c>)
 80005f0:	f003 facc 	bl	8003b8c <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d004      	beq.n	8000604 <main+0x158>
			BUZZER_START; // buton for buzzer
 80005fa:	2100      	movs	r1, #0
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <main+0x16c>)
 80005fe:	f004 fd05 	bl	800500c <HAL_TIM_PWM_Start>
 8000602:	e788      	b.n	8000516 <main+0x6a>
		}
		else {
			BUZZER_STOP;
 8000604:	2100      	movs	r1, #0
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <main+0x16c>)
 8000608:	f004 fda2 	bl	8005150 <HAL_TIM_PWM_Stop>
		u8g2_FirstPage(&u8g2);
 800060c:	e783      	b.n	8000516 <main+0x6a>
 800060e:	bf00      	nop
 8000610:	200000ac 	.word	0x200000ac
 8000614:	20000028 	.word	0x20000028
 8000618:	200000f4 	.word	0x200000f4
 800061c:	200001d2 	.word	0x200001d2
 8000620:	08001155 	.word	0x08001155
 8000624:	08001219 	.word	0x08001219
 8000628:	0800638c 	.word	0x0800638c
 800062c:	200001d8 	.word	0x200001d8
 8000630:	200001cc 	.word	0x200001cc
 8000634:	08005ee4 	.word	0x08005ee4
 8000638:	08005eb0 	.word	0x08005eb0
 800063c:	08005eb4 	.word	0x08005eb4
 8000640:	08005eb8 	.word	0x08005eb8
 8000644:	40010c00 	.word	0x40010c00
 8000648:	40011000 	.word	0x40011000

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000656:	2228      	movs	r2, #40	; 0x28
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 fc14 	bl	8005e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068a:	2301      	movs	r3, #1
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000698:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 ff04 	bl	80044b0 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ae:	f000 fb5d 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 f970 	bl	80049b4 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006da:	f000 fb47 	bl	8000d6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006de:	2302      	movs	r3, #2
 80006e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fae6 	bl	8004cbc <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006f6:	f000 fb39 	bl	8000d6c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_ADC1_Init+0x74>)
 8000716:	4a19      	ldr	r2, [pc, #100]	; (800077c <MX_ADC1_Init+0x78>)
 8000718:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_ADC1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_ADC1_Init+0x74>)
 8000722:	2201      	movs	r2, #1
 8000724:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_ADC1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_ADC1_Init+0x74>)
 800072e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000732:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_ADC1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_ADC1_Init+0x74>)
 800073c:	2201      	movs	r2, #1
 800073e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_ADC1_Init+0x74>)
 8000742:	f002 fc6b 	bl	800301c <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 fb0e 	bl	8000d6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000750:	2309      	movs	r3, #9
 8000752:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000754:	2301      	movs	r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000758:	2303      	movs	r3, #3
 800075a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_ADC1_Init+0x74>)
 8000762:	f002 fded 	bl	8003340 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800076c:	f000 fafe 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000028 	.word	0x20000028
 800077c:	40012400 	.word	0x40012400

08000780 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2C2_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_I2C2_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_I2C2_Init+0x50>)
 800078c:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_I2C2_Init+0x58>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_I2C2_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_I2C2_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_I2C2_Init+0x50>)
 800079e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_I2C2_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_I2C2_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_I2C2_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_I2C2_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_I2C2_Init+0x50>)
 80007be:	f003 fa2d 	bl	8003c1c <HAL_I2C_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 fad0 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000058 	.word	0x20000058
 80007d4:	40005800 	.word	0x40005800
 80007d8:	00061a80 	.word	0x00061a80

080007dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b092      	sub	sp, #72	; 0x48
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2220      	movs	r2, #32
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f005 fb3e 	bl	8005e88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800080c:	4b49      	ldr	r3, [pc, #292]	; (8000934 <MX_TIM1_Init+0x158>)
 800080e:	4a4a      	ldr	r2, [pc, #296]	; (8000938 <MX_TIM1_Init+0x15c>)
 8000810:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000812:	4b48      	ldr	r3, [pc, #288]	; (8000934 <MX_TIM1_Init+0x158>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b46      	ldr	r3, [pc, #280]	; (8000934 <MX_TIM1_Init+0x158>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800081e:	4b45      	ldr	r3, [pc, #276]	; (8000934 <MX_TIM1_Init+0x158>)
 8000820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000824:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000826:	4b43      	ldr	r3, [pc, #268]	; (8000934 <MX_TIM1_Init+0x158>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800082c:	4b41      	ldr	r3, [pc, #260]	; (8000934 <MX_TIM1_Init+0x158>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	4b40      	ldr	r3, [pc, #256]	; (8000934 <MX_TIM1_Init+0x158>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000838:	483e      	ldr	r0, [pc, #248]	; (8000934 <MX_TIM1_Init+0x158>)
 800083a:	f004 fb97 	bl	8004f6c <HAL_TIM_PWM_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000844:	f000 fa92 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000854:	4619      	mov	r1, r3
 8000856:	4837      	ldr	r0, [pc, #220]	; (8000934 <MX_TIM1_Init+0x158>)
 8000858:	f005 fa30 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000862:	f000 fa83 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000866:	2360      	movs	r3, #96	; 0x60
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086e:	2300      	movs	r3, #0
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000872:	2300      	movs	r3, #0
 8000874:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000876:	2304      	movs	r3, #4
 8000878:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	482a      	ldr	r0, [pc, #168]	; (8000934 <MX_TIM1_Init+0x158>)
 800088c:	f004 fdcc 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000896:	f000 fa69 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	2204      	movs	r2, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4824      	ldr	r0, [pc, #144]	; (8000934 <MX_TIM1_Init+0x158>)
 80008a4:	f004 fdc0 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80008ae:	f000 fa5d 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	2208      	movs	r2, #8
 80008b8:	4619      	mov	r1, r3
 80008ba:	481e      	ldr	r0, [pc, #120]	; (8000934 <MX_TIM1_Init+0x158>)
 80008bc:	f004 fdb4 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80008c6:	f000 fa51 	bl	8000d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4811      	ldr	r0, [pc, #68]	; (8000934 <MX_TIM1_Init+0x158>)
 80008ee:	f005 fa43 	bl	8005d78 <HAL_TIMEx_ConfigBreakDeadTime>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80008f8:	f000 fa38 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
 // htim1.Instance->CR2 =0;
  htim1.Instance->CCR1 = 350;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_TIM1_Init+0x158>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = 350;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_TIM1_Init+0x158>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800090e:	639a      	str	r2, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = 350;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_TIM1_Init+0x158>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000918:	63da      	str	r2, [r3, #60]	; 0x3c
  htim1.Instance->ARR = BLDC_CHOPPER_PERIOD;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_TIM1_Init+0x158>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f241 1294 	movw	r2, #4500	; 0x1194
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  //htim1.Instance->CR1 = 0x0001;

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000924:	4803      	ldr	r0, [pc, #12]	; (8000934 <MX_TIM1_Init+0x158>)
 8000926:	f000 fb5f 	bl	8000fe8 <HAL_TIM_MspPostInit>

}
 800092a:	bf00      	nop
 800092c:	3748      	adds	r7, #72	; 0x48
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000ac 	.word	0x200000ac
 8000938:	40012c00 	.word	0x40012c00

0800093c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	; 0x38
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
 8000968:	615a      	str	r2, [r3, #20]
 800096a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_TIM2_Init+0xe4>)
 800096e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 179;
 8000974:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <MX_TIM2_Init+0xe4>)
 8000976:	22b3      	movs	r2, #179	; 0xb3
 8000978:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_TIM2_Init+0xe4>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <MX_TIM2_Init+0xe4>)
 8000982:	2263      	movs	r2, #99	; 0x63
 8000984:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_TIM2_Init+0xe4>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_TIM2_Init+0xe4>)
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000992:	4823      	ldr	r0, [pc, #140]	; (8000a20 <MX_TIM2_Init+0xe4>)
 8000994:	f004 fa48 	bl	8004e28 <HAL_TIM_Base_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800099e:	f000 f9e5 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ac:	4619      	mov	r1, r3
 80009ae:	481c      	ldr	r0, [pc, #112]	; (8000a20 <MX_TIM2_Init+0xe4>)
 80009b0:	f004 fdf8 	bl	80055a4 <HAL_TIM_ConfigClockSource>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80009ba:	f000 f9d7 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009be:	4818      	ldr	r0, [pc, #96]	; (8000a20 <MX_TIM2_Init+0xe4>)
 80009c0:	f004 fad4 	bl	8004f6c <HAL_TIM_PWM_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80009ca:	f000 f9cf 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	4619      	mov	r1, r3
 80009dc:	4810      	ldr	r0, [pc, #64]	; (8000a20 <MX_TIM2_Init+0xe4>)
 80009de:	f005 f96d 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80009e8:	f000 f9c0 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ec:	2360      	movs	r3, #96	; 0x60
 80009ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <MX_TIM2_Init+0xe4>)
 8000a04:	f004 fd10 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a0e:	f000 f9ad 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a12:	4803      	ldr	r0, [pc, #12]	; (8000a20 <MX_TIM2_Init+0xe4>)
 8000a14:	f000 fae8 	bl	8000fe8 <HAL_TIM_MspPostInit>

}
 8000a18:	bf00      	nop
 8000a1a:	3738      	adds	r7, #56	; 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000f4 	.word	0x200000f4

08000a24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a40:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <MX_TIM3_Init+0xa0>)
 8000a42:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <MX_TIM3_Init+0xa4>)
 8000a44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_TIM3_Init+0xa0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_TIM3_Init+0xa0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <MX_TIM3_Init+0xa0>)
 8000a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_TIM3_Init+0xa0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_TIM3_Init+0xa0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a66:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <MX_TIM3_Init+0xa0>)
 8000a68:	f004 f9de 	bl	8004e28 <HAL_TIM_Base_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a72:	f000 f97b 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	4619      	mov	r1, r3
 8000a82:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <MX_TIM3_Init+0xa0>)
 8000a84:	f004 fd8e 	bl	80055a4 <HAL_TIM_ConfigClockSource>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 f96d 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <MX_TIM3_Init+0xa0>)
 8000aa0:	f005 f90c 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000aaa:	f000 f95f 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  // değişken atanaıp ilk değeri alması
  htim3.Init.Prescaler = SPEED_TIMER_PRESCALER;
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <MX_TIM3_Init+0xa0>)
 8000ab0:	2248      	movs	r2, #72	; 0x48
 8000ab2:	605a      	str	r2, [r3, #4]
  htim3.Init.Period = SPEED_TIMER_PERIOD;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <MX_TIM3_Init+0xa0>)
 8000ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aba:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM3_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000013c 	.word	0x2000013c
 8000ac8:	40000400 	.word	0x40000400

08000acc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <MX_TIM4_Init+0x98>)
 8000aec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000af0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000af4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000afe:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000b12:	f004 f989 	bl	8004e28 <HAL_TIM_Base_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000b1c:	f000 f926 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000b2e:	f004 fd39 	bl	80055a4 <HAL_TIM_ConfigClockSource>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000b38:	f000 f918 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000b4a:	f005 f8b7 	bl	8005cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000b54:	f000 f90a 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000184 	.word	0x20000184
 8000b64:	40000800 	.word	0x40000800

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7c:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a41      	ldr	r2, [pc, #260]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b94:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a3b      	ldr	r2, [pc, #236]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000b9a:	f043 0320 	orr.w	r3, r3, #32
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0320 	and.w	r3, r3, #32
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a35      	ldr	r2, [pc, #212]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b33      	ldr	r3, [pc, #204]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a2f      	ldr	r2, [pc, #188]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000bca:	f043 0308 	orr.w	r3, r3, #8
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_GPIO_Init+0x120>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0308 	and.w	r3, r3, #8
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f24e 0101 	movw	r1, #57345	; 0xe001
 8000be2:	482a      	ldr	r0, [pc, #168]	; (8000c8c <MX_GPIO_Init+0x124>)
 8000be4:	f002 ffe9 	bl	8003bba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY3_Pin KEY2_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY3_Pin|KEY2_Pin|KEY1_Pin;
 8000be8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4824      	ldr	r0, [pc, #144]	; (8000c90 <MX_GPIO_Init+0x128>)
 8000bfe:	f002 fe41 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY4_Pin */
  GPIO_InitStruct.Pin = KEY4_Pin;
 8000c02:	2301      	movs	r3, #1
 8000c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY4_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4619      	mov	r1, r3
 8000c14:	481f      	ldr	r0, [pc, #124]	; (8000c94 <MX_GPIO_Init+0x12c>)
 8000c16:	f002 fe35 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4816      	ldr	r0, [pc, #88]	; (8000c8c <MX_GPIO_Init+0x124>)
 8000c32:	f002 fe27 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <MX_GPIO_Init+0x124>)
 8000c50:	f002 fe18 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_Pin H2_Pin H3_Pin */
  GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 8000c54:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_GPIO_Init+0x130>)
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4619      	mov	r1, r3
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <MX_GPIO_Init+0x124>)
 8000c6a:	f002 fe0b 	bl	8003884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2017      	movs	r0, #23
 8000c74:	f002 fdcf 	bl	8003816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c78:	2017      	movs	r0, #23
 8000c7a:	f002 fde8 	bl	800384e <HAL_NVIC_EnableIRQ>

}
 8000c7e:	bf00      	nop
 8000c80:	3720      	adds	r7, #32
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010c00 	.word	0x40010c00
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40010800 	.word	0x40010800
 8000c98:	10310000 	.word	0x10310000

08000c9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim1 )
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d123      	bne.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x58>
  {
		adc_raw = HAL_ADC_GetValue(&hadc1);
 8000cac:	481a      	ldr	r0, [pc, #104]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cae:	f002 fb3b 	bl	8003328 <HAL_ADC_GetValue>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cb8:	801a      	strh	r2, [r3, #0]
		pwm = adc_to_pwm(adc_raw);
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fa5a 	bl	8000178 <adc_to_pwm>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cca:	801a      	strh	r2, [r3, #0]

	  	//* SET PWM TO TIMER 1 *//
		A_DOWN_PWM_DUTY  = pwm;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cce:	881a      	ldrh	r2, [r3, #0]
 8000cd0:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34
		B_DOWN_PWM_DUTY  = pwm;
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
		C_DOWN_PWM_DUTY  = pwm;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	63da      	str	r2, [r3, #60]	; 0x3c

		//* Clear flag *//
		__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f06f 0201 	mvn.w	r2, #1
 8000cf2:	611a      	str	r2, [r3, #16]
  }

  if (htim == &htim3 )
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d107      	bne.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x70>
  {
	// Overflow - the motor is stopped
  	speed_raw = 0;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	801a      	strh	r2, [r3, #0]

	//* Clear flag *//
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f06f 0201 	mvn.w	r2, #1
 8000d0a:	611a      	str	r2, [r3, #16]
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000ac 	.word	0x200000ac
 8000d18:	20000028 	.word	0x20000028
 8000d1c:	200001ce 	.word	0x200001ce
 8000d20:	200001d0 	.word	0x200001d0
 8000d24:	2000013c 	.word	0x2000013c
 8000d28:	200001d4 	.word	0x200001d4

08000d2c <Buzzer_Beep_Beep>:
void Buzzer_Beep(void){
	BUZZER_START;
	HAL_Delay(40);
	BUZZER_STOP;
}
void Buzzer_Beep_Beep(void){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	BUZZER_START;
 8000d30:	2100      	movs	r1, #0
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <Buzzer_Beep_Beep+0x3c>)
 8000d34:	f004 f96a 	bl	800500c <HAL_TIM_PWM_Start>
	HAL_Delay(40);
 8000d38:	2028      	movs	r0, #40	; 0x28
 8000d3a:	f002 f94b 	bl	8002fd4 <HAL_Delay>
	BUZZER_STOP;
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4809      	ldr	r0, [pc, #36]	; (8000d68 <Buzzer_Beep_Beep+0x3c>)
 8000d42:	f004 fa05 	bl	8005150 <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 8000d46:	2032      	movs	r0, #50	; 0x32
 8000d48:	f002 f944 	bl	8002fd4 <HAL_Delay>
	BUZZER_START;
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <Buzzer_Beep_Beep+0x3c>)
 8000d50:	f004 f95c 	bl	800500c <HAL_TIM_PWM_Start>
	HAL_Delay(40);
 8000d54:	2028      	movs	r0, #40	; 0x28
 8000d56:	f002 f93d 	bl	8002fd4 <HAL_Delay>
	BUZZER_STOP;
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <Buzzer_Beep_Beep+0x3c>)
 8000d5e:	f004 f9f7 	bl	8005150 <HAL_TIM_PWM_Stop>
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000f4 	.word	0x200000f4

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_MspInit+0x60>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_MspInit+0x60>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000

08000ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <HAL_ADC_MspInit+0x98>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d137      	bne.n	8000e6c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <HAL_ADC_MspInit+0x9c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <HAL_ADC_MspInit+0x9c>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_ADC_MspInit+0x9c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_ADC_MspInit+0x9c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_ADC_MspInit+0x9c>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_ADC_MspInit+0x9c>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_ADC_MspInit+0x9c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <HAL_ADC_MspInit+0x9c>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_ADC_MspInit+0x9c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0318 	add.w	r3, r7, #24
 8000e50:	4619      	mov	r1, r3
 8000e52:	480a      	ldr	r0, [pc, #40]	; (8000e7c <HAL_ADC_MspInit+0xa0>)
 8000e54:	f002 fd16 	bl	8003884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <HAL_ADC_MspInit+0xa4>)
 8000e68:	f002 fd0c 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40012400 	.word	0x40012400
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	40010c00 	.word	0x40010c00

08000e84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <HAL_I2C_MspInit+0x74>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d124      	bne.n	8000eee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_I2C_MspInit+0x78>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_I2C_MspInit+0x78>)
 8000eaa:	f043 0308 	orr.w	r3, r3, #8
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_I2C_MspInit+0x78>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ebc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec2:	2312      	movs	r3, #18
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <HAL_I2C_MspInit+0x7c>)
 8000ed2:	f002 fcd7 	bl	8003884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_I2C_MspInit+0x78>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_I2C_MspInit+0x78>)
 8000edc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ee0:	61d3      	str	r3, [r2, #28]
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_I2C_MspInit+0x78>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40005800 	.word	0x40005800
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010c00 	.word	0x40010c00

08000f04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <HAL_TIM_PWM_MspInit+0x44>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d113      	bne.n	8000f3e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <HAL_TIM_PWM_MspInit+0x48>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <HAL_TIM_PWM_MspInit+0x48>)
 8000f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f20:	6193      	str	r3, [r2, #24]
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_TIM_PWM_MspInit+0x48>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2101      	movs	r1, #1
 8000f32:	2019      	movs	r0, #25
 8000f34:	f002 fc6f 	bl	8003816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f38:	2019      	movs	r0, #25
 8000f3a:	f002 fc88 	bl	800384e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40012c00 	.word	0x40012c00
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f60:	d10c      	bne.n	8000f7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_TIM_Base_MspInit+0x8c>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_TIM_Base_MspInit+0x8c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_TIM_Base_MspInit+0x8c>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f7a:	e02a      	b.n	8000fd2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <HAL_TIM_Base_MspInit+0x90>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d114      	bne.n	8000fb0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_TIM_Base_MspInit+0x8c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <HAL_TIM_Base_MspInit+0x8c>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_TIM_Base_MspInit+0x8c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	201d      	movs	r0, #29
 8000fa4:	f002 fc37 	bl	8003816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fa8:	201d      	movs	r0, #29
 8000faa:	f002 fc50 	bl	800384e <HAL_NVIC_EnableIRQ>
}
 8000fae:	e010      	b.n	8000fd2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_TIM_Base_MspInit+0x94>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_TIM_Base_MspInit+0x8c>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_TIM_Base_MspInit+0x8c>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_TIM_Base_MspInit+0x8c>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40000400 	.word	0x40000400
 8000fe4:	40000800 	.word	0x40000800

08000fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <HAL_TIM_MspPostInit+0xbc>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d119      	bne.n	800103c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_TIM_MspPostInit+0xc0>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <HAL_TIM_MspPostInit+0xc0>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <HAL_TIM_MspPostInit+0xc0>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001020:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	481d      	ldr	r0, [pc, #116]	; (80010ac <HAL_TIM_MspPostInit+0xc4>)
 8001036:	f002 fc25 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800103a:	e02f      	b.n	800109c <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001044:	d12a      	bne.n	800109c <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_TIM_MspPostInit+0xc0>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_TIM_MspPostInit+0xc0>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6193      	str	r3, [r2, #24]
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_TIM_MspPostInit+0xc0>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800105e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2302      	movs	r3, #2
 800106a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	480e      	ldr	r0, [pc, #56]	; (80010ac <HAL_TIM_MspPostInit+0xc4>)
 8001074:	f002 fc06 	bl	8003884 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_TIM_MspPostInit+0xc8>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
 8001096:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_TIM_MspPostInit+0xc8>)
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	6053      	str	r3, [r2, #4]
}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40012c00 	.word	0x40012c00
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010800 	.word	0x40010800
 80010b0:	40010000 	.word	0x40010000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr

080010de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fa:	f001 ff4f 	bl	8002f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}

08001102 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(H1_Pin);
 8001106:	2080      	movs	r0, #128	; 0x80
 8001108:	f002 fd70 	bl	8003bec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(H2_Pin);
 800110c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001110:	f002 fd6c 	bl	8003bec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(H3_Pin);
 8001114:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001118:	f002 fd68 	bl	8003bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
//	A_DOWN_PWM_DUTY  = pwm;
//	B_DOWN_PWM_DUTY  = pwm;
//	C_DOWN_PWM_DUTY  = pwm;

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <TIM1_UP_IRQHandler+0x10>)
 8001126:	f004 f877 	bl	8005218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000ac 	.word	0x200000ac

08001134 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	// Overflow - the motor is stopped
	//speed_raw = 0;
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <TIM3_IRQHandler+0x10>)
 800113a:	f004 f86d 	bl	8005218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000013c 	.word	0x2000013c

08001148 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <u8x8_stm32_gpio_and_delay>:
#ifdef i2cMode
extern I2C_HandleTypeDef hi2c2;
#endif

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	72fb      	strb	r3, [r7, #11]
 8001162:	4613      	mov	r3, r2
 8001164:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8001166:	7afb      	ldrb	r3, [r7, #11]
 8001168:	3b28      	subs	r3, #40	; 0x28
 800116a:	2b23      	cmp	r3, #35	; 0x23
 800116c:	d84f      	bhi.n	800120e <u8x8_stm32_gpio_and_delay+0xba>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <u8x8_stm32_gpio_and_delay+0x20>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	0800120f 	.word	0x0800120f
 8001178:	08001205 	.word	0x08001205
 800117c:	0800120f 	.word	0x0800120f
 8001180:	0800120f 	.word	0x0800120f
 8001184:	0800120f 	.word	0x0800120f
 8001188:	0800120f 	.word	0x0800120f
 800118c:	0800120f 	.word	0x0800120f
 8001190:	0800120f 	.word	0x0800120f
 8001194:	0800120f 	.word	0x0800120f
 8001198:	0800120f 	.word	0x0800120f
 800119c:	0800120f 	.word	0x0800120f
 80011a0:	0800120f 	.word	0x0800120f
 80011a4:	0800120f 	.word	0x0800120f
 80011a8:	0800120f 	.word	0x0800120f
 80011ac:	0800120f 	.word	0x0800120f
 80011b0:	0800120f 	.word	0x0800120f
 80011b4:	0800120f 	.word	0x0800120f
 80011b8:	0800120f 	.word	0x0800120f
 80011bc:	0800120f 	.word	0x0800120f
 80011c0:	0800120f 	.word	0x0800120f
 80011c4:	0800120f 	.word	0x0800120f
 80011c8:	0800120f 	.word	0x0800120f
 80011cc:	0800120f 	.word	0x0800120f
 80011d0:	0800120f 	.word	0x0800120f
 80011d4:	0800120f 	.word	0x0800120f
 80011d8:	0800120f 	.word	0x0800120f
 80011dc:	0800120f 	.word	0x0800120f
 80011e0:	0800120f 	.word	0x0800120f
 80011e4:	0800120f 	.word	0x0800120f
 80011e8:	0800120f 	.word	0x0800120f
 80011ec:	0800120f 	.word	0x0800120f
 80011f0:	0800120f 	.word	0x0800120f
 80011f4:	0800120f 	.word	0x0800120f
 80011f8:	0800120f 	.word	0x0800120f
 80011fc:	0800120f 	.word	0x0800120f
 8001200:	0800120f 	.word	0x0800120f
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8001204:	7abb      	ldrb	r3, [r7, #10]
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fee4 	bl	8002fd4 <HAL_Delay>
		break;
 800120c:	bf00      	nop
#ifdef spiMode
		HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, arg_int);
#endif
		break;
	}
	return 1;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <u8x8_byte_stm32_hw_i2c>:
	}
	return 1;
}

uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af02      	add	r7, sp, #8
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	72fb      	strb	r3, [r7, #11]
 8001226:	4613      	mov	r3, r2
 8001228:	72bb      	strb	r3, [r7, #10]
	/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	3b14      	subs	r3, #20
 800122e:	2b0c      	cmp	r3, #12
 8001230:	d847      	bhi.n	80012c2 <u8x8_byte_stm32_hw_i2c+0xaa>
 8001232:	a201      	add	r2, pc, #4	; (adr r2, 8001238 <u8x8_byte_stm32_hw_i2c+0x20>)
 8001234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001238:	080012c7 	.word	0x080012c7
 800123c:	080012c3 	.word	0x080012c3
 8001240:	080012c3 	.word	0x080012c3
 8001244:	0800126d 	.word	0x0800126d
 8001248:	0800129d 	.word	0x0800129d
 800124c:	080012a5 	.word	0x080012a5
 8001250:	080012c3 	.word	0x080012c3
 8001254:	080012c3 	.word	0x080012c3
 8001258:	080012c3 	.word	0x080012c3
 800125c:	080012c3 	.word	0x080012c3
 8001260:	080012c3 	.word	0x080012c3
 8001264:	080012c3 	.word	0x080012c3
 8001268:	080012c7 	.word	0x080012c7
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 8001270:	e010      	b.n	8001294 <u8x8_byte_stm32_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	b2d1      	uxtb	r1, r2
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <u8x8_byte_stm32_hw_i2c+0xc0>)
 800127c:	7011      	strb	r1, [r2, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	7819      	ldrb	r1, [r3, #0]
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <u8x8_byte_stm32_hw_i2c+0xc4>)
 8001286:	5499      	strb	r1, [r3, r2]
			data++;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3301      	adds	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
			arg_int--;
 800128e:	7abb      	ldrb	r3, [r7, #10]
 8001290:	3b01      	subs	r3, #1
 8001292:	72bb      	strb	r3, [r7, #10]
		while( arg_int > 0 )
 8001294:	7abb      	ldrb	r3, [r7, #10]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1eb      	bne.n	8001272 <u8x8_byte_stm32_hw_i2c+0x5a>
		}
		break;
 800129a:	e017      	b.n	80012cc <u8x8_byte_stm32_hw_i2c+0xb4>
		/* add your custom code to init i2c subsystem */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <u8x8_byte_stm32_hw_i2c+0xc0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
		break;
 80012a2:	e013      	b.n	80012cc <u8x8_byte_stm32_hw_i2c+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
#ifdef i2cMode
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <u8x8_byte_stm32_hw_i2c+0xc0>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	2264      	movs	r2, #100	; 0x64
 80012ac:	9200      	str	r2, [sp, #0]
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <u8x8_byte_stm32_hw_i2c+0xc4>)
 80012b0:	2178      	movs	r1, #120	; 0x78
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <u8x8_byte_stm32_hw_i2c+0xc8>)
 80012b4:	f002 fdf6 	bl	8003ea4 <HAL_I2C_Master_Transmit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <u8x8_byte_stm32_hw_i2c+0xb2>
 80012be:	2300      	movs	r3, #0
 80012c0:	e005      	b.n	80012ce <u8x8_byte_stm32_hw_i2c+0xb6>
#endif
		break;
	default:
		return 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e003      	b.n	80012ce <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
 80012c6:	bf00      	nop
 80012c8:	e000      	b.n	80012cc <u8x8_byte_stm32_hw_i2c+0xb4>
		break;
 80012ca:	bf00      	nop
	}
	return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000260 	.word	0x20000260
 80012dc:	20000264 	.word	0x20000264
 80012e0:	20000058 	.word	0x20000058

080012e4 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	78fa      	ldrb	r2, [r7, #3]
 80012f4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af02      	add	r7, sp, #8
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	4608      	mov	r0, r1
 800130c:	4611      	mov	r1, r2
 800130e:	461a      	mov	r2, r3
 8001310:	4603      	mov	r3, r0
 8001312:	70fb      	strb	r3, [r7, #3]
 8001314:	460b      	mov	r3, r1
 8001316:	70bb      	strb	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800131c:	78fa      	ldrb	r2, [r7, #3]
 800131e:	787b      	ldrb	r3, [r7, #1]
 8001320:	4413      	add	r3, r2
 8001322:	b2d8      	uxtb	r0, r3
 8001324:	78ba      	ldrb	r2, [r7, #2]
 8001326:	7c3b      	ldrb	r3, [r7, #16]
 8001328:	4413      	add	r3, r2
 800132a:	b2db      	uxtb	r3, r3
 800132c:	78ba      	ldrb	r2, [r7, #2]
 800132e:	78f9      	ldrb	r1, [r7, #3]
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	4603      	mov	r3, r0
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 ffdb 	bl	80022f0 <u8g2_IsIntersection>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d012      	beq.n	8001366 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001340:	e00d      	b.n	800135e <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001342:	787b      	ldrb	r3, [r7, #1]
 8001344:	78ba      	ldrb	r2, [r7, #2]
 8001346:	78f9      	ldrb	r1, [r7, #3]
 8001348:	2000      	movs	r0, #0
 800134a:	9000      	str	r0, [sp, #0]
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 ff03 	bl	8002158 <u8g2_DrawHVLine>
    y++;    
 8001352:	78bb      	ldrb	r3, [r7, #2]
 8001354:	3301      	adds	r3, #1
 8001356:	70bb      	strb	r3, [r7, #2]
    h--;
 8001358:	7c3b      	ldrb	r3, [r7, #16]
 800135a:	3b01      	subs	r3, #1
 800135c:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 800135e:	7c3b      	ldrb	r3, [r7, #16]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ee      	bne.n	8001342 <u8g2_DrawBox+0x40>
 8001364:	e000      	b.n	8001368 <u8g2_DrawBox+0x66>
    return;
 8001366:	bf00      	nop
  }
}
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7c1b      	ldrb	r3, [r3, #16]
 800137c:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001384:	461a      	mov	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fd73 	bl	8005e88 <memset>
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af02      	add	r7, sp, #8
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	70fb      	strb	r3, [r7, #3]
 80013b6:	4613      	mov	r3, r2
 80013b8:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	7c1b      	ldrb	r3, [r3, #16]
 80013c0:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ca:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	89ba      	ldrh	r2, [r7, #12]
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80013d8:	89bb      	ldrh	r3, [r7, #12]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80013de:	89bb      	ldrh	r3, [r7, #12]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	4413      	add	r3, r2
 80013e4:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80013e6:	7bf9      	ldrb	r1, [r7, #15]
 80013e8:	78ba      	ldrb	r2, [r7, #2]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	460b      	mov	r3, r1
 80013f0:	2100      	movs	r1, #0
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f001 fc94 	bl	8002d20 <u8x8_DrawTile>
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001412:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800141a:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	7c5b      	ldrb	r3, [r3, #17]
 8001422:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001424:	7bba      	ldrb	r2, [r7, #14]
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	4619      	mov	r1, r3
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffbd 	bl	80013aa <u8g2_send_tile_row>
    src_row++;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	3301      	adds	r3, #1
 800143a:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	429a      	cmp	r2, r3
 8001442:	d203      	bcs.n	800144c <u8g2_send_buffer+0x4c>
 8001444:	7bba      	ldrb	r2, [r7, #14]
 8001446:	7b3b      	ldrb	r3, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3eb      	bcc.n	8001424 <u8g2_send_buffer+0x24>
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	78fa      	ldrb	r2, [r7, #3]
 8001464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	4798      	blx	r3
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff69 	bl	800136e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800149c:	2100      	movs	r1, #0
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffd8 	bl	8001454 <u8g2_SetBufferCurrTileRow>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ffa3 	bl	8001400 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c0:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	4413      	add	r3, r2
 80014cc:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	7c5b      	ldrb	r3, [r3, #17]
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d304      	bcc.n	80014e4 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f001 fc71 	bl	8002dc2 <u8x8_RefreshDisplay>
    return 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e00d      	b.n	8001500 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff3d 	bl	800136e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	4619      	mov	r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ffab 	bl	8001454 <u8g2_SetBufferCurrTileRow>
  return 1;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2208      	movs	r2, #8
 8001514:	701a      	strb	r2, [r3, #0]
  return buf;
 8001516:	4b03      	ldr	r3, [pc, #12]	; (8001524 <u8g2_m_16_8_f+0x1c>)
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000284 	.word	0x20000284

08001528 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 800153e:	490c      	ldr	r1, [pc, #48]	; (8001570 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f001 fca1 	bl	8002e88 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001546:	f107 0313 	add.w	r3, r7, #19
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ffdc 	bl	8001508 <u8g2_m_16_8_f>
 8001550:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001552:	7cfa      	ldrb	r2, [r7, #19]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 800155a:	6979      	ldr	r1, [r7, #20]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 ffaf 	bl	80024c0 <u8g2_SetupBuffer>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	080029c1 	.word	0x080029c1
 8001570:	08002c1d 	.word	0x08002c1d
 8001574:	08002347 	.word	0x08002347

08001578 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	781b      	ldrb	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	81fb      	strh	r3, [r7, #14]
    font++;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3301      	adds	r3, #1
 80015b8:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	4413      	add	r3, r2
 80015ca:	81fb      	strh	r3, [r7, #14]
    return pos;
 80015cc:	89fb      	ldrh	r3, [r7, #14]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80015e2:	2100      	movs	r1, #0
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f7ff ffc7 	bl	8001578 <u8g2_font_get_byte>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80015f2:	2101      	movs	r1, #1
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7ff ffbf 	bl	8001578 <u8g2_font_get_byte>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001602:	2102      	movs	r1, #2
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f7ff ffb7 	bl	8001578 <u8g2_font_get_byte>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001612:	2103      	movs	r1, #3
 8001614:	6838      	ldr	r0, [r7, #0]
 8001616:	f7ff ffaf 	bl	8001578 <u8g2_font_get_byte>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001622:	2104      	movs	r1, #4
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f7ff ffa7 	bl	8001578 <u8g2_font_get_byte>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001632:	2105      	movs	r1, #5
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f7ff ff9f 	bl	8001578 <u8g2_font_get_byte>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001642:	2106      	movs	r1, #6
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f7ff ff97 	bl	8001578 <u8g2_font_get_byte>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001652:	2107      	movs	r1, #7
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f7ff ff8f 	bl	8001578 <u8g2_font_get_byte>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001662:	2108      	movs	r1, #8
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	f7ff ff87 	bl	8001578 <u8g2_font_get_byte>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001672:	2109      	movs	r1, #9
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7ff ff7f 	bl	8001578 <u8g2_font_get_byte>
 800167a:	4603      	mov	r3, r0
 800167c:	b25a      	sxtb	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001682:	210a      	movs	r1, #10
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f7ff ff77 	bl	8001578 <u8g2_font_get_byte>
 800168a:	4603      	mov	r3, r0
 800168c:	b25a      	sxtb	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001692:	210b      	movs	r1, #11
 8001694:	6838      	ldr	r0, [r7, #0]
 8001696:	f7ff ff6f 	bl	8001578 <u8g2_font_get_byte>
 800169a:	4603      	mov	r3, r0
 800169c:	b25a      	sxtb	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80016a2:	210c      	movs	r1, #12
 80016a4:	6838      	ldr	r0, [r7, #0]
 80016a6:	f7ff ff67 	bl	8001578 <u8g2_font_get_byte>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80016b2:	210d      	movs	r1, #13
 80016b4:	6838      	ldr	r0, [r7, #0]
 80016b6:	f7ff ff5f 	bl	8001578 <u8g2_font_get_byte>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b25a      	sxtb	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80016c2:	210e      	movs	r1, #14
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f7ff ff57 	bl	8001578 <u8g2_font_get_byte>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b25a      	sxtb	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80016d2:	210f      	movs	r1, #15
 80016d4:	6838      	ldr	r0, [r7, #0]
 80016d6:	f7ff ff4f 	bl	8001578 <u8g2_font_get_byte>
 80016da:	4603      	mov	r3, r0
 80016dc:	b25a      	sxtb	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80016e2:	2110      	movs	r1, #16
 80016e4:	6838      	ldr	r0, [r7, #0]
 80016e6:	f7ff ff47 	bl	8001578 <u8g2_font_get_byte>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b25a      	sxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80016f2:	2111      	movs	r1, #17
 80016f4:	6838      	ldr	r0, [r7, #0]
 80016f6:	f7ff ff50 	bl	800159a <u8g2_font_get_word>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001702:	2113      	movs	r1, #19
 8001704:	6838      	ldr	r0, [r7, #0]
 8001706:	f7ff ff48 	bl	800159a <u8g2_font_get_word>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001712:	2115      	movs	r1, #21
 8001714:	6838      	ldr	r0, [r7, #0]
 8001716:	f7ff ff40 	bl	800159a <u8g2_font_get_word>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	82da      	strh	r2, [r3, #22]
#endif
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800172a:	b480      	push	{r7}
 800172c:	b085      	sub	sp, #20
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7a9b      	ldrb	r3, [r3, #10]
 800173a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	7b7b      	ldrb	r3, [r7, #13]
 8001748:	fa42 f303 	asr.w	r3, r2, r3
 800174c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800174e:	7b7b      	ldrb	r3, [r7, #13]
 8001750:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001752:	7bba      	ldrb	r2, [r7, #14]
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	4413      	add	r3, r2
 8001758:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	2b07      	cmp	r3, #7
 800175e:	d91a      	bls.n	8001796 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001760:	2308      	movs	r3, #8
 8001762:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001764:	7b3a      	ldrb	r2, [r7, #12]
 8001766:	7b7b      	ldrb	r3, [r7, #13]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	7b3b      	ldrb	r3, [r7, #12]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	b25a      	sxtb	r2, r3
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4313      	orrs	r3, r2
 800178c:	b25b      	sxtb	r3, r3
 800178e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	3b08      	subs	r3, #8
 8001794:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	4013      	ands	r3, r2
 80017aa:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7bba      	ldrb	r2, [r7, #14]
 80017b0:	729a      	strb	r2, [r3, #10]
  return val;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffab 	bl	800172a <u8g2_font_decode_get_unsigned_bits>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80017d8:	2301      	movs	r3, #1
 80017da:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	3b01      	subs	r3, #1
 80017e0:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80017e2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	7bbb      	ldrb	r3, [r7, #14]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	73fb      	strb	r3, [r7, #15]
  return v;
 80017f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001804:	b490      	push	{r4, r7}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4604      	mov	r4, r0
 800180c:	4608      	mov	r0, r1
 800180e:	4611      	mov	r1, r2
 8001810:	461a      	mov	r2, r3
 8001812:	4623      	mov	r3, r4
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	4603      	mov	r3, r0
 8001818:	71bb      	strb	r3, [r7, #6]
 800181a:	460b      	mov	r3, r1
 800181c:	717b      	strb	r3, [r7, #5]
 800181e:	4613      	mov	r3, r2
 8001820:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001822:	793b      	ldrb	r3, [r7, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d010      	beq.n	800184a <u8g2_add_vector_y+0x46>
 8001828:	2b02      	cmp	r3, #2
 800182a:	dc13      	bgt.n	8001854 <u8g2_add_vector_y+0x50>
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <u8g2_add_vector_y+0x32>
 8001830:	2b01      	cmp	r3, #1
 8001832:	d005      	beq.n	8001840 <u8g2_add_vector_y+0x3c>
 8001834:	e00e      	b.n	8001854 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8001836:	797a      	ldrb	r2, [r7, #5]
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	4413      	add	r3, r2
 800183c:	71fb      	strb	r3, [r7, #7]
      break;
 800183e:	e00e      	b.n	800185e <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 8001840:	79ba      	ldrb	r2, [r7, #6]
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4413      	add	r3, r2
 8001846:	71fb      	strb	r3, [r7, #7]
      break;
 8001848:	e009      	b.n	800185e <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 800184a:	797b      	ldrb	r3, [r7, #5]
 800184c:	79fa      	ldrb	r2, [r7, #7]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	71fb      	strb	r3, [r7, #7]
      break;
 8001852:	e004      	b.n	800185e <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 8001854:	79bb      	ldrb	r3, [r7, #6]
 8001856:	79fa      	ldrb	r2, [r7, #7]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	71fb      	strb	r3, [r7, #7]
      break;      
 800185c:	bf00      	nop
  }
  return dy;
 800185e:	79fb      	ldrb	r3, [r7, #7]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bc90      	pop	{r4, r7}
 8001868:	4770      	bx	lr

0800186a <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800186a:	b490      	push	{r4, r7}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4604      	mov	r4, r0
 8001872:	4608      	mov	r0, r1
 8001874:	4611      	mov	r1, r2
 8001876:	461a      	mov	r2, r3
 8001878:	4623      	mov	r3, r4
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	4603      	mov	r3, r0
 800187e:	71bb      	strb	r3, [r7, #6]
 8001880:	460b      	mov	r3, r1
 8001882:	717b      	strb	r3, [r7, #5]
 8001884:	4613      	mov	r3, r2
 8001886:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001888:	793b      	ldrb	r3, [r7, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d010      	beq.n	80018b0 <u8g2_add_vector_x+0x46>
 800188e:	2b02      	cmp	r3, #2
 8001890:	dc13      	bgt.n	80018ba <u8g2_add_vector_x+0x50>
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <u8g2_add_vector_x+0x32>
 8001896:	2b01      	cmp	r3, #1
 8001898:	d005      	beq.n	80018a6 <u8g2_add_vector_x+0x3c>
 800189a:	e00e      	b.n	80018ba <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 800189c:	79ba      	ldrb	r2, [r7, #6]
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4413      	add	r3, r2
 80018a2:	71fb      	strb	r3, [r7, #7]
      break;
 80018a4:	e00e      	b.n	80018c4 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 80018a6:	797b      	ldrb	r3, [r7, #5]
 80018a8:	79fa      	ldrb	r2, [r7, #7]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	71fb      	strb	r3, [r7, #7]
      break;
 80018ae:	e009      	b.n	80018c4 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	79fa      	ldrb	r2, [r7, #7]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	71fb      	strb	r3, [r7, #7]
      break;
 80018b8:	e004      	b.n	80018c4 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 80018ba:	797a      	ldrb	r2, [r7, #5]
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	4413      	add	r3, r2
 80018c0:	71fb      	strb	r3, [r7, #7]
      break;      
 80018c2:	bf00      	nop
  }
  return dx;
 80018c4:	79fb      	ldrb	r3, [r7, #7]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc90      	pop	{r4, r7}
 80018ce:	4770      	bx	lr

080018d0 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
 80018dc:	4613      	mov	r3, r2
 80018de:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3358      	adds	r3, #88	; 0x58
 80018e4:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80018f0:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80018f8:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001900:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	7d7b      	ldrb	r3, [r7, #21]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800190e:	7dfa      	ldrb	r2, [r7, #23]
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	429a      	cmp	r2, r3
 8001914:	d201      	bcs.n	800191a <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	791b      	ldrb	r3, [r3, #4]
 800191e:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	795b      	ldrb	r3, [r3, #5]
 8001924:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001926:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800192a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	7b9b      	ldrb	r3, [r3, #14]
 8001932:	7bb8      	ldrb	r0, [r7, #14]
 8001934:	f7ff ff99 	bl	800186a <u8g2_add_vector_x>
 8001938:	4603      	mov	r3, r0
 800193a:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800193c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001940:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	7b9b      	ldrb	r3, [r3, #14]
 8001948:	7b78      	ldrb	r0, [r7, #13]
 800194a:	f7ff ff5b 	bl	8001804 <u8g2_add_vector_y>
 800194e:	4603      	mov	r3, r0
 8001950:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001952:	78bb      	ldrb	r3, [r7, #2]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00f      	beq.n	8001978 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	7b1a      	ldrb	r2, [r3, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	7b9b      	ldrb	r3, [r3, #14]
 8001966:	7db8      	ldrb	r0, [r7, #22]
 8001968:	7b7a      	ldrb	r2, [r7, #13]
 800196a:	7bb9      	ldrb	r1, [r7, #14]
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	4603      	mov	r3, r0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fbf1 	bl	8002158 <u8g2_DrawHVLine>
 8001976:	e012      	b.n	800199e <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	7adb      	ldrb	r3, [r3, #11]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10e      	bne.n	800199e <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	7b5a      	ldrb	r2, [r3, #13]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	7b9b      	ldrb	r3, [r3, #14]
 800198e:	7db8      	ldrb	r0, [r7, #22]
 8001990:	7b7a      	ldrb	r2, [r7, #13]
 8001992:	7bb9      	ldrb	r1, [r7, #14]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	4603      	mov	r3, r0
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 fbdd 	bl	8002158 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800199e:	7dfa      	ldrb	r2, [r7, #23]
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d309      	bcc.n	80019ba <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 80019a6:	7dfa      	ldrb	r2, [r7, #23]
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	757b      	strb	r3, [r7, #21]
    ly++;
 80019b2:	7d3b      	ldrb	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80019b8:	e79f      	b.n	80018fa <u8g2_font_decode_len+0x2a>
      break;
 80019ba:	bf00      	nop
  }
  lx += cnt;
 80019bc:	7d7a      	ldrb	r2, [r7, #21]
 80019be:	7dfb      	ldrb	r3, [r7, #23]
 80019c0:	4413      	add	r3, r2
 80019c2:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80019c4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 80019cc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	71da      	strb	r2, [r3, #7]
  
}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3358      	adds	r3, #88	; 0x58
 80019ea:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80019fe:	4619      	mov	r1, r3
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7ff fe92 	bl	800172a <u8g2_font_decode_get_unsigned_bits>
 8001a06:	4603      	mov	r3, r0
 8001a08:	b25a      	sxtb	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001a14:	4619      	mov	r1, r3
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f7ff fe87 	bl	800172a <u8g2_font_decode_get_unsigned_bits>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	b25a      	sxtb	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	7b1b      	ldrb	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf0c      	ite	eq
 8001a36:	2301      	moveq	r3, #1
 8001a38:	2300      	movne	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	735a      	strb	r2, [r3, #13]
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3358      	adds	r3, #88	; 0x58
 8001a5a:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffbc 	bl	80019dc <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a6a:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001a72:	4619      	mov	r1, r3
 8001a74:	6938      	ldr	r0, [r7, #16]
 8001a76:	f7ff fea2 	bl	80017be <u8g2_font_decode_get_signed_bits>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001a84:	4619      	mov	r1, r3
 8001a86:	6938      	ldr	r0, [r7, #16]
 8001a88:	f7ff fe99 	bl	80017be <u8g2_font_decode_get_signed_bits>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001a96:	4619      	mov	r1, r3
 8001a98:	6938      	ldr	r0, [r7, #16]
 8001a9a:	f7ff fe90 	bl	80017be <u8g2_font_decode_get_signed_bits>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f340 80cf 	ble.w	8001c4c <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	7918      	ldrb	r0, [r3, #4]
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	7b7b      	ldrb	r3, [r7, #13]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	425b      	negs	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	b25a      	sxtb	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	7b9b      	ldrb	r3, [r3, #14]
 8001ac4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001ac8:	f7ff fecf 	bl	800186a <u8g2_add_vector_x>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	7958      	ldrb	r0, [r3, #5]
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	7b7b      	ldrb	r3, [r7, #13]
 8001adc:	4413      	add	r3, r2
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	b25a      	sxtb	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	7b9b      	ldrb	r3, [r3, #14]
 8001aea:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001aee:	f7ff fe89 	bl	8001804 <u8g2_add_vector_y>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	791b      	ldrb	r3, [r3, #4]
 8001afe:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	795b      	ldrb	r3, [r3, #5]
 8001b04:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001b0a:	7d7b      	ldrb	r3, [r7, #21]
 8001b0c:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	7b9b      	ldrb	r3, [r3, #14]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d852      	bhi.n	8001bbc <u8g2_font_decode_glyph+0x170>
 8001b16:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <u8g2_font_decode_glyph+0xd0>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b2d 	.word	0x08001b2d
 8001b20:	08001b45 	.word	0x08001b45
 8001b24:	08001b69 	.word	0x08001b69
 8001b28:	08001b99 	.word	0x08001b99
      {
	case 0:
	    x1 += decode->glyph_width;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	7dbb      	ldrb	r3, [r7, #22]
 8001b36:	4413      	add	r3, r2
 8001b38:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	7d3b      	ldrb	r3, [r7, #20]
 8001b3e:	4413      	add	r3, r2
 8001b40:	753b      	strb	r3, [r7, #20]
	    break;
 8001b42:	e03b      	b.n	8001bbc <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	7dfa      	ldrb	r2, [r7, #23]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001b52:	7dbb      	ldrb	r3, [r7, #22]
 8001b54:	3301      	adds	r3, #1
 8001b56:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	7d3b      	ldrb	r3, [r7, #20]
 8001b62:	4413      	add	r3, r2
 8001b64:	753b      	strb	r3, [r7, #20]
	    break;
 8001b66:	e029      	b.n	8001bbc <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	7dfa      	ldrb	r2, [r7, #23]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001b7c:	7dbb      	ldrb	r3, [r7, #22]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	7d7a      	ldrb	r2, [r7, #21]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b8a:	7d7b      	ldrb	r3, [r7, #21]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001b90:	7d3b      	ldrb	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001b96:	e011      	b.n	8001bbc <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	7dbb      	ldrb	r3, [r7, #22]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	7d7a      	ldrb	r2, [r7, #21]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bae:	7d7b      	ldrb	r3, [r7, #21]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001bb4:	7d3b      	ldrb	r3, [r7, #20]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001bba:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001bbc:	7db8      	ldrb	r0, [r7, #22]
 8001bbe:	7d7a      	ldrb	r2, [r7, #21]
 8001bc0:	7df9      	ldrb	r1, [r7, #23]
 8001bc2:	7d3b      	ldrb	r3, [r7, #20]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fb91 	bl	80022f0 <u8g2_IsIntersection>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <u8g2_font_decode_glyph+0x18e>
	return d;
 8001bd4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001bd8:	e03a      	b.n	8001c50 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2200      	movs	r2, #0
 8001be4:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001bec:	4619      	mov	r1, r3
 8001bee:	6938      	ldr	r0, [r7, #16]
 8001bf0:	f7ff fd9b 	bl	800172a <u8g2_font_decode_get_unsigned_bits>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6938      	ldr	r0, [r7, #16]
 8001c02:	f7ff fd92 	bl	800172a <u8g2_font_decode_get_unsigned_bits>
 8001c06:	4603      	mov	r3, r0
 8001c08:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fe5d 	bl	80018d0 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001c16:	7abb      	ldrb	r3, [r7, #10]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fe57 	bl	80018d0 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001c22:	2101      	movs	r1, #1
 8001c24:	6938      	ldr	r0, [r7, #16]
 8001c26:	f7ff fd80 	bl	800172a <u8g2_font_decode_get_unsigned_bits>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ec      	bne.n	8001c0a <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001c36:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dd00      	ble.n	8001c40 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001c3e:	e7d2      	b.n	8001be6 <u8g2_font_decode_glyph+0x19a>
	break;
 8001c40:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	7b1a      	ldrb	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8001c4c:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c68:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3317      	adds	r3, #23
 8001c6e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	2bff      	cmp	r3, #255	; 0xff
 8001c74:	d82a      	bhi.n	8001ccc <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	2b60      	cmp	r3, #96	; 0x60
 8001c7a:	d907      	bls.n	8001c8c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001c82:	461a      	mov	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	4413      	add	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e009      	b.n	8001ca0 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d906      	bls.n	8001ca0 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001c98:	461a      	mov	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d04e      	beq.n	8001d48 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	887a      	ldrh	r2, [r7, #2]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d102      	bne.n	8001cbc <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	e049      	b.n	8001d50 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001cca:	e7e9      	b.n	8001ca0 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001cde:	2100      	movs	r1, #0
 8001ce0:	6938      	ldr	r0, [r7, #16]
 8001ce2:	f7ff fc5a 	bl	800159a <u8g2_font_get_word>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	4413      	add	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	6938      	ldr	r0, [r7, #16]
 8001cf4:	f7ff fc51 	bl	800159a <u8g2_font_get_word>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001d02:	89fa      	ldrh	r2, [r7, #14]
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d3e9      	bcc.n	8001cde <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001d10:	89fb      	ldrh	r3, [r7, #14]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	89fb      	ldrh	r3, [r7, #14]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001d24:	89fb      	ldrh	r3, [r7, #14]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d010      	beq.n	8001d4c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001d2a:	89fa      	ldrh	r2, [r7, #14]
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d102      	bne.n	8001d38 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3303      	adds	r3, #3
 8001d36:	e00b      	b.n	8001d50 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	4413      	add	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001d46:	e7e0      	b.n	8001d0a <u8g2_font_get_glyph_data+0xb2>
	break;
 8001d48:	bf00      	nop
 8001d4a:	e000      	b.n	8001d4e <u8g2_font_get_glyph_data+0xf6>
	break;
 8001d4c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	4608      	mov	r0, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	70fb      	strb	r3, [r7, #3]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	70bb      	strb	r3, [r7, #2]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	78ba      	ldrb	r2, [r7, #2]
 8001d82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001d86:	883b      	ldrh	r3, [r7, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ff64 	bl	8001c58 <u8g2_font_get_glyph_data>
 8001d90:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fe56 	bl	8001a4c <u8g2_font_decode_glyph>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	4608      	mov	r0, r1
 8001dba:	4611      	mov	r1, r2
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	70fb      	strb	r3, [r7, #3]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70bb      	strb	r3, [r7, #2]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d833      	bhi.n	8001e3c <u8g2_DrawGlyph+0x8c>
 8001dd4:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <u8g2_DrawGlyph+0x2c>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001ded 	.word	0x08001ded
 8001de0:	08001e01 	.word	0x08001e01
 8001de4:	08001e15 	.word	0x08001e15
 8001de8:	08001e29 	.word	0x08001e29
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	78bb      	ldrb	r3, [r7, #2]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	70bb      	strb	r3, [r7, #2]
      break;
 8001dfe:	e01d      	b.n	8001e3c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	70fb      	strb	r3, [r7, #3]
      break;
 8001e12:	e013      	b.n	8001e3c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	70bb      	strb	r3, [r7, #2]
      break;
 8001e26:	e009      	b.n	8001e3c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	4413      	add	r3, r2
 8001e38:	70fb      	strb	r3, [r7, #3]
      break;
 8001e3a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001e3c:	883b      	ldrh	r3, [r7, #0]
 8001e3e:	78ba      	ldrb	r2, [r7, #2]
 8001e40:	78f9      	ldrb	r1, [r7, #3]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff88 	bl	8001d58 <u8g2_font_draw_glyph>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop

08001e54 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	72fb      	strb	r3, [r7, #11]
 8001e62:	4613      	mov	r3, r2
 8001e64:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fc7d 	bl	8002766 <u8x8_utf8_init>
  sum = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	7812      	ldrb	r2, [r2, #0]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	4798      	blx	r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001e82:	8abb      	ldrh	r3, [r7, #20]
 8001e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d038      	beq.n	8001efe <u8g2_draw_string+0xaa>
      break;
    str++;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001e92:	8abb      	ldrh	r3, [r7, #20]
 8001e94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d0e9      	beq.n	8001e70 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001e9c:	8abb      	ldrh	r3, [r7, #20]
 8001e9e:	7aba      	ldrb	r2, [r7, #10]
 8001ea0:	7af9      	ldrb	r1, [r7, #11]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f7ff ff84 	bl	8001db0 <u8g2_DrawGlyph>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d81e      	bhi.n	8001ef4 <u8g2_draw_string+0xa0>
 8001eb6:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <u8g2_draw_string+0x68>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001ed7 	.word	0x08001ed7
 8001ec4:	08001ee1 	.word	0x08001ee1
 8001ec8:	08001eeb 	.word	0x08001eeb
      {
	case 0:
	  x += delta;
 8001ecc:	7afa      	ldrb	r2, [r7, #11]
 8001ece:	7cfb      	ldrb	r3, [r7, #19]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	72fb      	strb	r3, [r7, #11]
	  break;
 8001ed4:	e00e      	b.n	8001ef4 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001ed6:	7aba      	ldrb	r2, [r7, #10]
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	4413      	add	r3, r2
 8001edc:	72bb      	strb	r3, [r7, #10]
	  break;
 8001ede:	e009      	b.n	8001ef4 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001ee0:	7afa      	ldrb	r2, [r7, #11]
 8001ee2:	7cfb      	ldrb	r3, [r7, #19]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	72fb      	strb	r3, [r7, #11]
	  break;
 8001ee8:	e004      	b.n	8001ef4 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001eea:	7aba      	ldrb	r2, [r7, #10]
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	72bb      	strb	r3, [r7, #10]
	  break;
 8001ef2:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8001ef4:	7dfa      	ldrb	r2, [r7, #23]
 8001ef6:	7cfb      	ldrb	r3, [r7, #19]
 8001ef8:	4413      	add	r3, r2
 8001efa:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001efc:	e7b8      	b.n	8001e70 <u8g2_draw_string+0x1c>
      break;
 8001efe:	bf00      	nop
    }
  }
  return sum;
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop

08001f0c <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	72fb      	strb	r3, [r7, #11]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <u8g2_DrawStr+0x30>)
 8001f22:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001f24:	7aba      	ldrb	r2, [r7, #10]
 8001f26:	7af9      	ldrb	r1, [r7, #11]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7ff ff92 	bl	8001e54 <u8g2_draw_string>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	08002781 	.word	0x08002781

08001f40 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d05d      	beq.n	800200c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d04d      	beq.n	800200e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d11c      	bne.n	8001fb6 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	da05      	bge.n	8001f98 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dd32      	ble.n	800200e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8001fb4:	e02b      	b.n	800200e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8001fcc:	440b      	add	r3, r1
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	da0d      	bge.n	8001fee <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	b25a      	sxtb	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	dd07      	ble.n	800200e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800200a:	e000      	b.n	800200e <u8g2_UpdateRefHeight+0xce>
    return;
 800200c:	bf00      	nop
  }  
}
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  return 0;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
	...

0800202c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a03      	ldr	r2, [pc, #12]	; (8002044 <u8g2_SetFontPosBaseline+0x18>)
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	08002017 	.word	0x08002017

08002048 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d00b      	beq.n	8002074 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3368      	adds	r3, #104	; 0x68
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fab5 	bl	80015d8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ff66 	bl	8001f40 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	4611      	mov	r1, r2
 8002088:	461a      	mov	r2, r3
 800208a:	460b      	mov	r3, r1
 800208c:	71fb      	strb	r3, [r7, #7]
 800208e:	4613      	mov	r3, r2
 8002090:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	7dbb      	ldrb	r3, [r7, #22]
 80020a2:	4413      	add	r3, r2
 80020a4:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80020a6:	7dfa      	ldrb	r2, [r7, #23]
 80020a8:	7dbb      	ldrb	r3, [r7, #22]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d90b      	bls.n	80020c6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80020ae:	7dfa      	ldrb	r2, [r7, #23]
 80020b0:	79bb      	ldrb	r3, [r7, #6]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d205      	bcs.n	80020c2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	75bb      	strb	r3, [r7, #22]
      b--;
 80020ba:	7dbb      	ldrb	r3, [r7, #22]
 80020bc:	3b01      	subs	r3, #1
 80020be:	75bb      	strb	r3, [r7, #22]
 80020c0:	e001      	b.n	80020c6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80020c6:	7dfa      	ldrb	r2, [r7, #23]
 80020c8:	79bb      	ldrb	r3, [r7, #6]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d301      	bcc.n	80020d2 <u8g2_clip_intersection2+0x56>
    return 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e01c      	b.n	800210c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80020d2:	7dba      	ldrb	r2, [r7, #22]
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d801      	bhi.n	80020de <u8g2_clip_intersection2+0x62>
    return 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	e016      	b.n	800210c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80020de:	7dfa      	ldrb	r2, [r7, #23]
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d201      	bcs.n	80020ea <u8g2_clip_intersection2+0x6e>
    a = c;
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80020ea:	7dba      	ldrb	r2, [r7, #22]
 80020ec:	79bb      	ldrb	r3, [r7, #6]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d901      	bls.n	80020f6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80020f2:	79bb      	ldrb	r3, [r7, #6]
 80020f4:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	7dfa      	ldrb	r2, [r7, #23]
 80020fa:	701a      	strb	r2, [r3, #0]
  b -= a;
 80020fc:	7dba      	ldrb	r2, [r7, #22]
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	7dba      	ldrb	r2, [r7, #22]
 8002108:	701a      	strb	r2, [r3, #0]
  return 1;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	371c      	adds	r7, #28
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002116:	b590      	push	{r4, r7, lr}
 8002118:	b085      	sub	sp, #20
 800211a:	af02      	add	r7, sp, #8
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	4608      	mov	r0, r1
 8002120:	4611      	mov	r1, r2
 8002122:	461a      	mov	r2, r3
 8002124:	4603      	mov	r3, r0
 8002126:	70fb      	strb	r3, [r7, #3]
 8002128:	460b      	mov	r3, r1
 800212a:	70bb      	strb	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002136:	78ba      	ldrb	r2, [r7, #2]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002140:	7878      	ldrb	r0, [r7, #1]
 8002142:	78ba      	ldrb	r2, [r7, #2]
 8002144:	78f9      	ldrb	r1, [r7, #3]
 8002146:	7e3b      	ldrb	r3, [r7, #24]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	4603      	mov	r3, r0
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	47a0      	blx	r4
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}

08002158 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b085      	sub	sp, #20
 800215c:	af02      	add	r7, sp, #8
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4603      	mov	r3, r0
 8002168:	70fb      	strb	r3, [r7, #3]
 800216a:	460b      	mov	r3, r1
 800216c:	70bb      	strb	r3, [r7, #2]
 800216e:	4613      	mov	r3, r2
 8002170:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002178:	2b00      	cmp	r3, #0
 800217a:	d06d      	beq.n	8002258 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800217c:	787b      	ldrb	r3, [r7, #1]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d06a      	beq.n	8002258 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002182:	787b      	ldrb	r3, [r7, #1]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d918      	bls.n	80021ba <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8002188:	7e3b      	ldrb	r3, [r7, #24]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d109      	bne.n	80021a2 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	787b      	ldrb	r3, [r7, #1]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	70fb      	strb	r3, [r7, #3]
	  x++;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	3301      	adds	r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	70fb      	strb	r3, [r7, #3]
 80021a0:	e00b      	b.n	80021ba <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80021a2:	7e3b      	ldrb	r3, [r7, #24]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d108      	bne.n	80021ba <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80021a8:	78ba      	ldrb	r2, [r7, #2]
 80021aa:	787b      	ldrb	r3, [r7, #1]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	70bb      	strb	r3, [r7, #2]
	  y++;
 80021b2:	78bb      	ldrb	r3, [r7, #2]
 80021b4:	3301      	adds	r3, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80021ba:	7e3b      	ldrb	r3, [r7, #24]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80021c2:	7e3b      	ldrb	r3, [r7, #24]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d119      	bne.n	80021fc <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80021ce:	78bb      	ldrb	r3, [r7, #2]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d838      	bhi.n	8002246 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80021da:	78bb      	ldrb	r3, [r7, #2]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d934      	bls.n	800224a <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80021ec:	1c79      	adds	r1, r7, #1
 80021ee:	1cf8      	adds	r0, r7, #3
 80021f0:	f7ff ff44 	bl	800207c <u8g2_clip_intersection2>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d119      	bne.n	800222e <u8g2_DrawHVLine+0xd6>
	  return;
 80021fa:	e02d      	b.n	8002258 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	429a      	cmp	r2, r3
 8002206:	d822      	bhi.n	800224e <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	429a      	cmp	r2, r3
 8002212:	d91e      	bls.n	8002252 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002220:	1c79      	adds	r1, r7, #1
 8002222:	1cb8      	adds	r0, r7, #2
 8002224:	f7ff ff2a 	bl	800207c <u8g2_clip_intersection2>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d013      	beq.n	8002256 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002232:	689c      	ldr	r4, [r3, #8]
 8002234:	78f9      	ldrb	r1, [r7, #3]
 8002236:	78ba      	ldrb	r2, [r7, #2]
 8002238:	7878      	ldrb	r0, [r7, #1]
 800223a:	7e3b      	ldrb	r3, [r7, #24]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	4603      	mov	r3, r0
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	47a0      	blx	r4
 8002244:	e008      	b.n	8002258 <u8g2_DrawHVLine+0x100>
	  return;
 8002246:	bf00      	nop
 8002248:	e006      	b.n	8002258 <u8g2_DrawHVLine+0x100>
	  return;
 800224a:	bf00      	nop
 800224c:	e004      	b.n	8002258 <u8g2_DrawHVLine+0x100>
	  return;
 800224e:	bf00      	nop
 8002250:	e002      	b.n	8002258 <u8g2_DrawHVLine+0x100>
	  return;
 8002252:	bf00      	nop
 8002254:	e000      	b.n	8002258 <u8g2_DrawHVLine+0x100>
	  return;
 8002256:	bf00      	nop
    }
}
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}

0800225e <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d903      	bls.n	8002280 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800228a:	b490      	push	{r4, r7}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	4604      	mov	r4, r0
 8002292:	4608      	mov	r0, r1
 8002294:	4611      	mov	r1, r2
 8002296:	461a      	mov	r2, r3
 8002298:	4623      	mov	r3, r4
 800229a:	71fb      	strb	r3, [r7, #7]
 800229c:	4603      	mov	r3, r0
 800229e:	71bb      	strb	r3, [r7, #6]
 80022a0:	460b      	mov	r3, r1
 80022a2:	717b      	strb	r3, [r7, #5]
 80022a4:	4613      	mov	r3, r2
 80022a6:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 80022a8:	797a      	ldrb	r2, [r7, #5]
 80022aa:	79bb      	ldrb	r3, [r7, #6]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d20d      	bcs.n	80022cc <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80022b0:	793a      	ldrb	r2, [r7, #4]
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d901      	bls.n	80022bc <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e014      	b.n	80022e6 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80022bc:	797a      	ldrb	r2, [r7, #5]
 80022be:	793b      	ldrb	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d901      	bls.n	80022c8 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e00e      	b.n	80022e6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e00c      	b.n	80022e6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80022cc:	793a      	ldrb	r2, [r7, #4]
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d907      	bls.n	80022e4 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80022d4:	797a      	ldrb	r2, [r7, #5]
 80022d6:	793b      	ldrb	r3, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d901      	bls.n	80022e0 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80022dc:	2301      	movs	r3, #1
 80022de:	e002      	b.n	80022e6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e000      	b.n	80022e6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80022e4:	2300      	movs	r3, #0
    }
  }
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc90      	pop	{r4, r7}
 80022ee:	4770      	bx	lr

080022f0 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	70fb      	strb	r3, [r7, #3]
 8002302:	460b      	mov	r3, r1
 8002304:	70bb      	strb	r3, [r7, #2]
 8002306:	4613      	mov	r3, r2
 8002308:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8002316:	7c3b      	ldrb	r3, [r7, #16]
 8002318:	78ba      	ldrb	r2, [r7, #2]
 800231a:	f7ff ffb6 	bl	800228a <u8g2_is_intersection_decision_tree>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <u8g2_IsIntersection+0x38>
    return 0; 
 8002324:	2300      	movs	r3, #0
 8002326:	e00a      	b.n	800233e <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	f7ff ffa7 	bl	800228a <u8g2_is_intersection_decision_tree>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002346:	b480      	push	{r7}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	4608      	mov	r0, r1
 8002350:	4611      	mov	r1, r2
 8002352:	461a      	mov	r2, r3
 8002354:	4603      	mov	r3, r0
 8002356:	70fb      	strb	r3, [r7, #3]
 8002358:	460b      	mov	r3, r1
 800235a:	70bb      	strb	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002360:	78bb      	ldrb	r3, [r7, #2]
 8002362:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8002370:	7c3a      	ldrb	r2, [r7, #16]
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002388:	2b01      	cmp	r3, #1
 800238a:	d801      	bhi.n	8002390 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800238c:	7c3b      	ldrb	r3, [r7, #16]
 800238e:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800239a:	7c3b      	ldrb	r3, [r7, #16]
 800239c:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800239e:	78bb      	ldrb	r3, [r7, #2]
 80023a0:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 80023a2:	89fb      	ldrh	r3, [r7, #14]
 80023a4:	f023 0307 	bic.w	r3, r3, #7
 80023a8:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	7c1b      	ldrb	r3, [r3, #16]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	89fa      	ldrh	r2, [r7, #14]
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80023c0:	89fb      	ldrh	r3, [r7, #14]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4413      	add	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
  ptr += x;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4413      	add	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80023d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d117      	bne.n	8002408 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	7cbb      	ldrb	r3, [r7, #18]
 80023de:	4313      	orrs	r3, r2
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	7c7b      	ldrb	r3, [r7, #17]
 80023ec:	4053      	eors	r3, r2
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	701a      	strb	r2, [r3, #0]
	ptr++;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
	len--;
 80023fa:	787b      	ldrb	r3, [r7, #1]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8002400:	787b      	ldrb	r3, [r7, #1]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e8      	bne.n	80023d8 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002406:	e039      	b.n	800247c <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	7cbb      	ldrb	r3, [r7, #18]
 800240e:	4313      	orrs	r3, r2
 8002410:	b2da      	uxtb	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	7c7b      	ldrb	r3, [r7, #17]
 800241c:	4053      	eors	r3, r2
 800241e:	b2da      	uxtb	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	3301      	adds	r3, #1
 8002428:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	74fb      	strb	r3, [r7, #19]
      len--;
 8002432:	787b      	ldrb	r3, [r7, #1]
 8002434:	3b01      	subs	r3, #1
 8002436:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d115      	bne.n	800246a <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002444:	461a      	mov	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4413      	add	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002452:	2b01      	cmp	r3, #1
 8002454:	d801      	bhi.n	800245a <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002460:	2b01      	cmp	r3, #1
 8002462:	d008      	beq.n	8002476 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8002464:	2301      	movs	r3, #1
 8002466:	747b      	strb	r3, [r7, #17]
 8002468:	e005      	b.n	8002476 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800246a:	7cbb      	ldrb	r3, [r7, #18]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8002470:	7c7b      	ldrb	r3, [r7, #17]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8002476:	787b      	ldrb	r3, [r7, #1]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1c5      	bne.n	8002408 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800247c:	bf00      	nop
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	22ff      	movs	r2, #255	; 0xff
 80024a2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	22ff      	movs	r2, #255	; 0xff
 80024aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	79fa      	ldrb	r2, [r7, #7]
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff ffaf 	bl	8002486 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7ff fd7f 	bl	800202c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002552:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	7c1b      	ldrb	r3, [r3, #16]
 8002566:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	2b1f      	cmp	r3, #31
 800256c:	d901      	bls.n	8002572 <u8g2_update_dimension_common+0x34>
    t = 31;
 800256e:	231f      	movs	r3, #31
 8002570:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002586:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259c:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80025a6:	4413      	add	r3, r2
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	7c52      	ldrb	r2, [r2, #17]
 80025ac:	4293      	cmp	r3, r2
 80025ae:	dd06      	ble.n	80025be <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	7c5a      	ldrb	r2, [r3, #17]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	4413      	add	r3, r2
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	22f0      	movs	r2, #240	; 0xf0
 80025f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	8a9b      	ldrh	r3, [r3, #20]
 80025fa:	2bf0      	cmp	r3, #240	; 0xf0
 80025fc:	d805      	bhi.n	800260a <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	8a9b      	ldrh	r3, [r3, #20]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	8adb      	ldrh	r3, [r3, #22]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af02      	add	r7, sp, #8
 8002626:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	4603      	mov	r3, r0
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff fe53 	bl	80022f0 <u8g2_IsIntersection>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002658:	e03b      	b.n	80026d2 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800266e:	429a      	cmp	r2, r3
 8002670:	d205      	bcs.n	800267e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800268a:	429a      	cmp	r2, r3
 800268c:	d905      	bls.n	800269a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d205      	bcs.n	80026b6 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d905      	bls.n	80026d2 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ff2b 	bl	800253e <u8g2_update_dimension_common>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff7b 	bl	8002620 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af02      	add	r7, sp, #8
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	4608      	mov	r0, r1
 800273c:	4611      	mov	r1, r2
 800273e:	461a      	mov	r2, r3
 8002740:	4603      	mov	r3, r0
 8002742:	70fb      	strb	r3, [r7, #3]
 8002744:	460b      	mov	r3, r1
 8002746:	70bb      	strb	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800274c:	7878      	ldrb	r0, [r7, #1]
 800274e:	78ba      	ldrb	r2, [r7, #2]
 8002750:	78f9      	ldrb	r1, [r7, #3]
 8002752:	7c3b      	ldrb	r3, [r7, #16]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	4603      	mov	r3, r0
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff fcdc 	bl	8002116 <u8g2_draw_hv_line_2dir>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <u8x8_ascii_next+0x18>
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	2b0a      	cmp	r3, #10
 8002796:	d102      	bne.n	800279e <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800279c:	e001      	b.n	80027a2 <u8x8_ascii_next+0x22>
  return b;
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	b29b      	uxth	r3, r3
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	460b      	mov	r3, r1
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	691c      	ldr	r4, [r3, #16]
 80027be:	7afa      	ldrb	r2, [r7, #11]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2117      	movs	r1, #23
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	47a0      	blx	r4
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}

080027d2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80027de:	1cfb      	adds	r3, r7, #3
 80027e0:	461a      	mov	r2, r3
 80027e2:	2101      	movs	r1, #1
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ffe1 	bl	80027ac <u8x8_byte_SendBytes>
 80027ea:	4603      	mov	r3, r0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691c      	ldr	r4, [r3, #16]
 8002800:	2300      	movs	r3, #0
 8002802:	2200      	movs	r2, #0
 8002804:	2118      	movs	r1, #24
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	47a0      	blx	r4
 800280a:	4603      	mov	r3, r0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}

08002814 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691c      	ldr	r4, [r3, #16]
 8002820:	2300      	movs	r3, #0
 8002822:	2200      	movs	r2, #0
 8002824:	2119      	movs	r1, #25
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	47a0      	blx	r4
 800282a:	4603      	mov	r3, r0
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bd90      	pop	{r4, r7, pc}

08002834 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68dc      	ldr	r4, [r3, #12]
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	2300      	movs	r3, #0
 8002848:	2115      	movs	r1, #21
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	47a0      	blx	r4
 800284e:	4603      	mov	r3, r0
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bd90      	pop	{r4, r7, pc}

08002858 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68dc      	ldr	r4, [r3, #12]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	2300      	movs	r3, #0
 800286c:	2116      	movs	r1, #22
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	47a0      	blx	r4
 8002872:	4603      	mov	r3, r0
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}

0800287c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	460b      	mov	r3, r1
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68dc      	ldr	r4, [r3, #12]
 800288e:	7afa      	ldrb	r2, [r7, #11]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2117      	movs	r1, #23
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	47a0      	blx	r4
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd90      	pop	{r4, r7, pc}

080028a2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80028a2:	b590      	push	{r4, r7, lr}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68dc      	ldr	r4, [r3, #12]
 80028ae:	2300      	movs	r3, #0
 80028b0:	2200      	movs	r2, #0
 80028b2:	2118      	movs	r1, #24
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	47a0      	blx	r4
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd90      	pop	{r4, r7, pc}

080028c2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80028c2:	b590      	push	{r4, r7, lr}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68dc      	ldr	r4, [r3, #12]
 80028ce:	2300      	movs	r3, #0
 80028d0:	2200      	movs	r2, #0
 80028d2:	2119      	movs	r1, #25
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	47a0      	blx	r4
 80028d8:	4603      	mov	r3, r0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}

080028e2 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80028e2:	b590      	push	{r4, r7, lr}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	73fb      	strb	r3, [r7, #15]
    data++;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	3301      	adds	r3, #1
 80028f6:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2bfe      	cmp	r3, #254	; 0xfe
 80028fc:	d031      	beq.n	8002962 <u8x8_cad_SendSequence+0x80>
 80028fe:	2bfe      	cmp	r3, #254	; 0xfe
 8002900:	dc3d      	bgt.n	800297e <u8x8_cad_SendSequence+0x9c>
 8002902:	2b19      	cmp	r3, #25
 8002904:	dc3b      	bgt.n	800297e <u8x8_cad_SendSequence+0x9c>
 8002906:	2b18      	cmp	r3, #24
 8002908:	da23      	bge.n	8002952 <u8x8_cad_SendSequence+0x70>
 800290a:	2b16      	cmp	r3, #22
 800290c:	dc02      	bgt.n	8002914 <u8x8_cad_SendSequence+0x32>
 800290e:	2b15      	cmp	r3, #21
 8002910:	da03      	bge.n	800291a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002912:	e034      	b.n	800297e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002914:	2b17      	cmp	r3, #23
 8002916:	d00e      	beq.n	8002936 <u8x8_cad_SendSequence+0x54>
	return;
 8002918:	e031      	b.n	800297e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68dc      	ldr	r4, [r3, #12]
 8002924:	7bba      	ldrb	r2, [r7, #14]
 8002926:	7bf9      	ldrb	r1, [r7, #15]
 8002928:	2300      	movs	r3, #0
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	47a0      	blx	r4
	  data++;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	603b      	str	r3, [r7, #0]
	  break;
 8002934:	e022      	b.n	800297c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800293c:	f107 030e 	add.w	r3, r7, #14
 8002940:	461a      	mov	r2, r3
 8002942:	2101      	movs	r1, #1
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff99 	bl	800287c <u8x8_cad_SendData>
	  data++;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	603b      	str	r3, [r7, #0]
	  break;
 8002950:	e014      	b.n	800297c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68dc      	ldr	r4, [r3, #12]
 8002956:	7bf9      	ldrb	r1, [r7, #15]
 8002958:	2300      	movs	r3, #0
 800295a:	2200      	movs	r2, #0
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	47a0      	blx	r4
	  break;
 8002960:	e00c      	b.n	800297c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	461a      	mov	r2, r3
 800296c:	2129      	movs	r1, #41	; 0x29
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fa36 	bl	8002de0 <u8x8_gpio_call>
	  data++;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	3301      	adds	r3, #1
 8002978:	603b      	str	r3, [r7, #0]
	  break;
 800297a:	bf00      	nop
    cmd = *data;
 800297c:	e7b6      	b.n	80028ec <u8x8_cad_SendSequence+0xa>
	return;
 800297e:	bf00      	nop
    }
  }
}
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bd90      	pop	{r4, r7, pc}

08002986 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002986:	b590      	push	{r4, r7, lr}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	460b      	mov	r3, r1
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff ff2d 	bl	80027f4 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff ff18 	bl	80027d2 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	691c      	ldr	r4, [r3, #16]
 80029a6:	7afa      	ldrb	r2, [r7, #11]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2117      	movs	r1, #23
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff ff2f 	bl	8002814 <u8x8_byte_EndTransfer>
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}
	...

080029c0 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	72fb      	strb	r3, [r7, #11]
 80029ce:	4613      	mov	r3, r2
 80029d0:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80029d2:	7afb      	ldrb	r3, [r7, #11]
 80029d4:	3b14      	subs	r3, #20
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d86e      	bhi.n	8002ab8 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a77 	.word	0x08002a77
 80029e4:	080029f9 	.word	0x080029f9
 80029e8:	08002a27 	.word	0x08002a27
 80029ec:	08002a33 	.word	0x08002a33
 80029f0:	08002a9b 	.word	0x08002a9b
 80029f4:	08002aa3 	.word	0x08002aa3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 80029f8:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff ff07 	bl	8002814 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff fef4 	bl	80027f4 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff fedf 	bl	80027d2 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002a14:	7abb      	ldrb	r3, [r7, #10]
 8002a16:	4619      	mov	r1, r3
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff feda 	bl	80027d2 <u8x8_byte_SendByte>
      in_transfer = 1;
 8002a1e:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8002a24:	e04a      	b.n	8002abc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8002a26:	7abb      	ldrb	r3, [r7, #10]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff fed1 	bl	80027d2 <u8x8_byte_SendByte>
      break;      
 8002a30:	e044      	b.n	8002abc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8002a32:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff feea 	bl	8002814 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002a44:	e00a      	b.n	8002a5c <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	2118      	movs	r1, #24
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7ff ff9b 	bl	8002986 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002a50:	7abb      	ldrb	r3, [r7, #10]
 8002a52:	3b18      	subs	r3, #24
 8002a54:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3318      	adds	r3, #24
 8002a5a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002a5c:	7abb      	ldrb	r3, [r7, #10]
 8002a5e:	2b18      	cmp	r3, #24
 8002a60:	d8f1      	bhi.n	8002a46 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002a62:	7abb      	ldrb	r3, [r7, #10]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4619      	mov	r1, r3
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff ff8c 	bl	8002986 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
      break;
 8002a74:	e022      	b.n	8002abc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a7c:	2bff      	cmp	r3, #255	; 0xff
 8002a7e:	d103      	bne.n	8002a88 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2278      	movs	r2, #120	; 0x78
 8002a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	691c      	ldr	r4, [r3, #16]
 8002a8c:	7aba      	ldrb	r2, [r7, #10]
 8002a8e:	7af9      	ldrb	r1, [r7, #11]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	47a0      	blx	r4
 8002a96:	4603      	mov	r3, r0
 8002a98:	e011      	b.n	8002abe <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
      break;
 8002aa0:	e00c      	b.n	8002abc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f7ff feb2 	bl	8002814 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
      break;
 8002ab6:	e001      	b.n	8002abc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e000      	b.n	8002abe <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8002abc:	2301      	movs	r3, #1
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd90      	pop	{r4, r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000684 	.word	0x20000684

08002acc <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	72fb      	strb	r3, [r7, #11]
 8002ada:	4613      	mov	r3, r2
 8002adc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002ade:	7afb      	ldrb	r3, [r7, #11]
 8002ae0:	3b0b      	subs	r3, #11
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	f200 808a 	bhi.w	8002bfc <u8x8_d_ssd1306_sh1106_generic+0x130>
 8002ae8:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8002aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aee:	bf00      	nop
 8002af0:	08002b05 	.word	0x08002b05
 8002af4:	08002bfd 	.word	0x08002bfd
 8002af8:	08002b1f 	.word	0x08002b1f
 8002afc:	08002b51 	.word	0x08002b51
 8002b00:	08002b71 	.word	0x08002b71
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002b04:	7abb      	ldrb	r3, [r7, #10]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8002b0a:	4940      	ldr	r1, [pc, #256]	; (8002c0c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7ff fee8 	bl	80028e2 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8002b12:	e075      	b.n	8002c00 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002b14:	493e      	ldr	r1, [pc, #248]	; (8002c10 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7ff fee3 	bl	80028e2 <u8x8_cad_SendSequence>
      break;
 8002b1c:	e070      	b.n	8002c00 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002b1e:	7abb      	ldrb	r3, [r7, #10]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002b24:	493b      	ldr	r1, [pc, #236]	; (8002c14 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f7ff fedb 	bl	80028e2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	7c9a      	ldrb	r2, [r3, #18]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002b38:	e062      	b.n	8002c00 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8002b3a:	4937      	ldr	r1, [pc, #220]	; (8002c18 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff fed0 	bl	80028e2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	7cda      	ldrb	r2, [r3, #19]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002b4e:	e057      	b.n	8002c00 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7ff fea6 	bl	80028a2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002b56:	2181      	movs	r1, #129	; 0x81
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f7ff fe6b 	bl	8002834 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8002b5e:	7abb      	ldrb	r3, [r7, #10]
 8002b60:	4619      	mov	r1, r3
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f7ff fe78 	bl	8002858 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff feaa 	bl	80028c2 <u8x8_cad_EndTransfer>
      break;
 8002b6e:	e047      	b.n	8002c00 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f7ff fe96 	bl	80028a2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	795b      	ldrb	r3, [r3, #5]
 8002b7a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002b8e:	2140      	movs	r1, #64	; 0x40
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7ff fe4f 	bl	8002834 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f043 0310 	orr.w	r3, r3, #16
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff fe45 	bl	8002834 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7ff fe4f 	bl	8002858 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	799b      	ldrb	r3, [r3, #6]
 8002bbe:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7ff fe46 	bl	8002858 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	791b      	ldrb	r3, [r3, #4]
 8002bd0:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002bd8:	7dbb      	ldrb	r3, [r7, #22]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4619      	mov	r1, r3
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff fe4a 	bl	800287c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002be8:	7abb      	ldrb	r3, [r7, #10]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002bee:	7abb      	ldrb	r3, [r7, #10]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1eb      	bne.n	8002bcc <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7ff fe64 	bl	80028c2 <u8x8_cad_EndTransfer>
      break;
 8002bfa:	e001      	b.n	8002c00 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8002c00:	2301      	movs	r3, #1
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	080063d0 	.word	0x080063d0
 8002c10:	080063d8 	.word	0x080063d8
 8002c14:	080063e0 	.word	0x080063e0
 8002c18:	080063e8 	.word	0x080063e8

08002c1c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	72fb      	strb	r3, [r7, #11]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002c2e:	7aba      	ldrb	r2, [r7, #10]
 8002c30:	7af9      	ldrb	r1, [r7, #11]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f7ff ff49 	bl	8002acc <u8x8_d_ssd1306_sh1106_generic>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e014      	b.n	8002c6e <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8002c44:	7afb      	ldrb	r3, [r7, #11]
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	d009      	beq.n	8002c5e <u8x8_d_ssd1306_128x64_noname+0x42>
 8002c4a:	2b0a      	cmp	r3, #10
 8002c4c:	d10c      	bne.n	8002c68 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f829 	bl	8002ca6 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8002c54:	4908      	ldr	r1, [pc, #32]	; (8002c78 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7ff fe43 	bl	80028e2 <u8x8_cad_SendSequence>
      break;
 8002c5c:	e006      	b.n	8002c6c <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8002c5e:	4907      	ldr	r1, [pc, #28]	; (8002c7c <u8x8_d_ssd1306_128x64_noname+0x60>)
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f80d 	bl	8002c80 <u8x8_d_helper_display_setup_memory>
      break;
 8002c66:	e001      	b.n	8002c6c <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e000      	b.n	8002c6e <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8002c6c:	2301      	movs	r3, #1
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	08006398 	.word	0x08006398
 8002c7c:	080063f0 	.word	0x080063f0

08002c80 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	7c9a      	ldrb	r2, [r3, #18]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002ca6:	b590      	push	{r4, r7, lr}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695c      	ldr	r4, [r3, #20]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2128      	movs	r1, #40	; 0x28
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68dc      	ldr	r4, [r3, #12]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2114      	movs	r1, #20
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002cca:	2201      	movs	r2, #1
 8002ccc:	214b      	movs	r1, #75	; 0x4b
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f886 	bl	8002de0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	791b      	ldrb	r3, [r3, #4]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2129      	movs	r1, #41	; 0x29
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f87e 	bl	8002de0 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	214b      	movs	r1, #75	; 0x4b
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f879 	bl	8002de0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	791b      	ldrb	r3, [r3, #4]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2129      	movs	r1, #41	; 0x29
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f871 	bl	8002de0 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002cfe:	2201      	movs	r2, #1
 8002d00:	214b      	movs	r1, #75	; 0x4b
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f86c 	bl	8002de0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	795b      	ldrb	r3, [r3, #5]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2129      	movs	r1, #41	; 0x29
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f864 	bl	8002de0 <u8x8_gpio_call>
}    
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd90      	pop	{r4, r7, pc}

08002d20 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	70fb      	strb	r3, [r7, #3]
 8002d32:	460b      	mov	r3, r1
 8002d34:	70bb      	strb	r3, [r7, #2]
 8002d36:	4613      	mov	r3, r2
 8002d38:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002d3e:	78bb      	ldrb	r3, [r7, #2]
 8002d40:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002d42:	787b      	ldrb	r3, [r7, #1]
 8002d44:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689c      	ldr	r4, [r3, #8]
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	2201      	movs	r2, #1
 8002d54:	210f      	movs	r1, #15
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	47a0      	blx	r4
 8002d5a:	4603      	mov	r3, r0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd90      	pop	{r4, r7, pc}

08002d64 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689c      	ldr	r4, [r3, #8]
 8002d70:	2300      	movs	r3, #0
 8002d72:	2200      	movs	r2, #0
 8002d74:	2109      	movs	r1, #9
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	47a0      	blx	r4
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd90      	pop	{r4, r7, pc}

08002d82 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002d82:	b590      	push	{r4, r7, lr}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689c      	ldr	r4, [r3, #8]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2200      	movs	r2, #0
 8002d92:	210a      	movs	r1, #10
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	47a0      	blx	r4
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd90      	pop	{r4, r7, pc}

08002da0 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689c      	ldr	r4, [r3, #8]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	2300      	movs	r3, #0
 8002db4:	210b      	movs	r1, #11
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	47a0      	blx	r4
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd90      	pop	{r4, r7, pc}

08002dc2 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002dc2:	b590      	push	{r4, r7, lr}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689c      	ldr	r4, [r3, #8]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2110      	movs	r1, #16
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	47a0      	blx	r4
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd90      	pop	{r4, r7, pc}

08002de0 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
 8002dec:	4613      	mov	r3, r2
 8002dee:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695c      	ldr	r4, [r3, #20]
 8002df4:	78ba      	ldrb	r2, [r7, #2]
 8002df6:	78f9      	ldrb	r1, [r7, #3]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	47a0      	blx	r4
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd90      	pop	{r4, r7, pc}

08002e06 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	72fb      	strb	r3, [r7, #11]
 8002e14:	4613      	mov	r3, r2
 8002e16:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <u8x8_SetupDefaults+0x60>)
 8002e36:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <u8x8_SetupDefaults+0x60>)
 8002e3c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <u8x8_SetupDefaults+0x60>)
 8002e42:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <u8x8_SetupDefaults+0x60>)
 8002e48:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	22ff      	movs	r2, #255	; 0xff
 8002e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	22ff      	movs	r2, #255	; 0xff
 8002e74:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	08002e07 	.word	0x08002e07

08002e88 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f7ff ffc4 	bl	8002e24 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7ff ff55 	bl	8002d64 <u8x8_SetupMemory>
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ec4:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ec6:	490d      	ldr	r1, [pc, #52]	; (8002efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ecc:	e002      	b.n	8002ed4 <LoopCopyDataInit>

08002ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ed2:	3304      	adds	r3, #4

08002ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed8:	d3f9      	bcc.n	8002ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002edc:	4c0a      	ldr	r4, [pc, #40]	; (8002f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee0:	e001      	b.n	8002ee6 <LoopFillZerobss>

08002ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee4:	3204      	adds	r2, #4

08002ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee8:	d3fb      	bcc.n	8002ee2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002eea:	f7fe f92d 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eee:	f002 ffa7 	bl	8005e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ef2:	f7fd fadb 	bl	80004ac <main>
  bx lr
 8002ef6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002efc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002f00:	08006410 	.word	0x08006410
  ldr r2, =_sbss
 8002f04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002f08:	2000068c 	.word	0x2000068c

08002f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f0c:	e7fe      	b.n	8002f0c <ADC1_2_IRQHandler>
	...

08002f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <HAL_Init+0x28>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <HAL_Init+0x28>)
 8002f1a:	f043 0310 	orr.w	r3, r3, #16
 8002f1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f20:	2003      	movs	r0, #3
 8002f22:	f000 fc6d 	bl	8003800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f26:	2000      	movs	r0, #0
 8002f28:	f000 f808 	bl	8002f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f2c:	f7fd ff24 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40022000 	.word	0x40022000

08002f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_InitTick+0x54>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_InitTick+0x58>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fc85 	bl	800386a <HAL_SYSTICK_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00e      	b.n	8002f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d80a      	bhi.n	8002f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f70:	2200      	movs	r2, #0
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295
 8002f78:	f000 fc4d 	bl	8003816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f7c:	4a06      	ldr	r2, [pc, #24]	; (8002f98 <HAL_InitTick+0x5c>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20000008 	.word	0x20000008
 8002f98:	20000004 	.word	0x20000004

08002f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_IncTick+0x1c>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_IncTick+0x20>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <HAL_IncTick+0x20>)
 8002fae:	6013      	str	r3, [r2, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	20000008 	.word	0x20000008
 8002fbc:	20000688 	.word	0x20000688

08002fc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <HAL_GetTick+0x10>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	20000688 	.word	0x20000688

08002fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff fff0 	bl	8002fc0 <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d005      	beq.n	8002ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_Delay+0x44>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ffa:	bf00      	nop
 8002ffc:	f7ff ffe0 	bl	8002fc0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	429a      	cmp	r2, r3
 800300a:	d8f7      	bhi.n	8002ffc <HAL_Delay+0x28>
  {
  }
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000008 	.word	0x20000008

0800301c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e0be      	b.n	80031bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd febe 	bl	8000ddc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fabf 	bl	80035e4 <ADC_ConversionStop_Disable>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	f040 8099 	bne.w	80031aa <HAL_ADC_Init+0x18e>
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 8095 	bne.w	80031aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003088:	f023 0302 	bic.w	r3, r3, #2
 800308c:	f043 0202 	orr.w	r2, r3, #2
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800309c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7b1b      	ldrb	r3, [r3, #12]
 80030a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b4:	d003      	beq.n	80030be <HAL_ADC_Init+0xa2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d102      	bne.n	80030c4 <HAL_ADC_Init+0xa8>
 80030be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c2:	e000      	b.n	80030c6 <HAL_ADC_Init+0xaa>
 80030c4:	2300      	movs	r3, #0
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7d1b      	ldrb	r3, [r3, #20]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d119      	bne.n	8003108 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7b1b      	ldrb	r3, [r3, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	035a      	lsls	r2, r3, #13
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	e00b      	b.n	8003108 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <HAL_ADC_Init+0x1a8>)
 8003124:	4013      	ands	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	430b      	orrs	r3, r1
 800312e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003138:	d003      	beq.n	8003142 <HAL_ADC_Init+0x126>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d104      	bne.n	800314c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	3b01      	subs	r3, #1
 8003148:	051b      	lsls	r3, r3, #20
 800314a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	430a      	orrs	r2, r1
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_ADC_Init+0x1ac>)
 8003168:	4013      	ands	r3, r2
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	429a      	cmp	r2, r3
 800316e:	d10b      	bne.n	8003188 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003186:	e018      	b.n	80031ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	f023 0312 	bic.w	r3, r3, #18
 8003190:	f043 0210 	orr.w	r2, r3, #16
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031a8:	e007      	b.n	80031ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	f043 0210 	orr.w	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	ffe1f7fd 	.word	0xffe1f7fd
 80031c8:	ff1f0efe 	.word	0xff1f0efe

080031cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_Start+0x1a>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e098      	b.n	8003318 <HAL_ADC_Start+0x14c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f99e 	bl	8003530 <ADC_Enable>
 80031f4:	4603      	mov	r3, r0
 80031f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 8087 	bne.w	800330e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a41      	ldr	r2, [pc, #260]	; (8003320 <HAL_ADC_Start+0x154>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d105      	bne.n	800322a <HAL_ADC_Start+0x5e>
 800321e:	4b41      	ldr	r3, [pc, #260]	; (8003324 <HAL_ADC_Start+0x158>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d115      	bne.n	8003256 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d026      	beq.n	8003292 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800324c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003254:	e01d      	b.n	8003292 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2f      	ldr	r2, [pc, #188]	; (8003324 <HAL_ADC_Start+0x158>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_ADC_Start+0xaa>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a2b      	ldr	r2, [pc, #172]	; (8003320 <HAL_ADC_Start+0x154>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10d      	bne.n	8003292 <HAL_ADC_Start+0xc6>
 8003276:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <HAL_ADC_Start+0x158>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800328a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	f023 0206 	bic.w	r2, r3, #6
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80032aa:	e002      	b.n	80032b2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f06f 0202 	mvn.w	r2, #2
 80032c2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032d2:	d113      	bne.n	80032fc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032d8:	4a11      	ldr	r2, [pc, #68]	; (8003320 <HAL_ADC_Start+0x154>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d105      	bne.n	80032ea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_ADC_Start+0x158>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	e00c      	b.n	8003316 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	e003      	b.n	8003316 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40012800 	.word	0x40012800
 8003324:	40012400 	.word	0x40012400

08003328 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x20>
 800335c:	2302      	movs	r3, #2
 800335e:	e0dc      	b.n	800351a <HAL_ADC_ConfigChannel+0x1da>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b06      	cmp	r3, #6
 800336e:	d81c      	bhi.n	80033aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	3b05      	subs	r3, #5
 8003382:	221f      	movs	r2, #31
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	4019      	ands	r1, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3b05      	subs	r3, #5
 800339c:	fa00 f203 	lsl.w	r2, r0, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	635a      	str	r2, [r3, #52]	; 0x34
 80033a8:	e03c      	b.n	8003424 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d81c      	bhi.n	80033ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	3b23      	subs	r3, #35	; 0x23
 80033c4:	221f      	movs	r2, #31
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	4019      	ands	r1, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	3b23      	subs	r3, #35	; 0x23
 80033de:	fa00 f203 	lsl.w	r2, r0, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
 80033ea:	e01b      	b.n	8003424 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	3b41      	subs	r3, #65	; 0x41
 80033fe:	221f      	movs	r2, #31
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	4019      	ands	r1, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	3b41      	subs	r3, #65	; 0x41
 8003418:	fa00 f203 	lsl.w	r2, r0, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b09      	cmp	r3, #9
 800342a:	d91c      	bls.n	8003466 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68d9      	ldr	r1, [r3, #12]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	3b1e      	subs	r3, #30
 800343e:	2207      	movs	r2, #7
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	4019      	ands	r1, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6898      	ldr	r0, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	3b1e      	subs	r3, #30
 8003458:	fa00 f203 	lsl.w	r2, r0, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	e019      	b.n	800349a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6919      	ldr	r1, [r3, #16]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	2207      	movs	r2, #7
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	4019      	ands	r1, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6898      	ldr	r0, [r3, #8]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	fa00 f203 	lsl.w	r2, r0, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b10      	cmp	r3, #16
 80034a0:	d003      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034a6:	2b11      	cmp	r3, #17
 80034a8:	d132      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_ADC_ConfigChannel+0x1e4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d125      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d126      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d11a      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <HAL_ADC_ConfigChannel+0x1e8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a13      	ldr	r2, [pc, #76]	; (800352c <HAL_ADC_ConfigChannel+0x1ec>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	0c9a      	lsrs	r2, r3, #18
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034f0:	e002      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f9      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x1b2>
 80034fe:	e007      	b.n	8003510 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	40012400 	.word	0x40012400
 8003528:	20000000 	.word	0x20000000
 800352c:	431bde83 	.word	0x431bde83

08003530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d040      	beq.n	80035d0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800355e:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <ADC_Enable+0xac>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <ADC_Enable+0xb0>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	0c9b      	lsrs	r3, r3, #18
 800356a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800356c:	e002      	b.n	8003574 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	3b01      	subs	r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f9      	bne.n	800356e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800357a:	f7ff fd21 	bl	8002fc0 <HAL_GetTick>
 800357e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003580:	e01f      	b.n	80035c2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003582:	f7ff fd1d 	bl	8002fc0 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d918      	bls.n	80035c2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d011      	beq.n	80035c2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	f043 0210 	orr.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e007      	b.n	80035d2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d1d8      	bne.n	8003582 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000000 	.word	0x20000000
 80035e0:	431bde83 	.word	0x431bde83

080035e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d12e      	bne.n	800365c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800360e:	f7ff fcd7 	bl	8002fc0 <HAL_GetTick>
 8003612:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003614:	e01b      	b.n	800364e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003616:	f7ff fcd3 	bl	8002fc0 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d914      	bls.n	800364e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d10d      	bne.n	800364e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	f043 0210 	orr.w	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e007      	b.n	800365e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d0dc      	beq.n	8003616 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003684:	4013      	ands	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800369a:	4a04      	ldr	r2, [pc, #16]	; (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	60d3      	str	r3, [r2, #12]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <__NVIC_GetPriorityGrouping+0x18>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	f003 0307 	and.w	r3, r3, #7
}
 80036be:	4618      	mov	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	db0b      	blt.n	80036f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4906      	ldr	r1, [pc, #24]	; (8003700 <__NVIC_EnableIRQ+0x34>)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2001      	movs	r0, #1
 80036ee:	fa00 f202 	lsl.w	r2, r0, r2
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	e000e100 	.word	0xe000e100

08003704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003714:	2b00      	cmp	r3, #0
 8003716:	db0a      	blt.n	800372e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	490c      	ldr	r1, [pc, #48]	; (8003750 <__NVIC_SetPriority+0x4c>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	440b      	add	r3, r1
 8003728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800372c:	e00a      	b.n	8003744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4908      	ldr	r1, [pc, #32]	; (8003754 <__NVIC_SetPriority+0x50>)
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	3b04      	subs	r3, #4
 800373c:	0112      	lsls	r2, r2, #4
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	440b      	add	r3, r1
 8003742:	761a      	strb	r2, [r3, #24]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000e100 	.word	0xe000e100
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f1c3 0307 	rsb	r3, r3, #7
 8003772:	2b04      	cmp	r3, #4
 8003774:	bf28      	it	cs
 8003776:	2304      	movcs	r3, #4
 8003778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3304      	adds	r3, #4
 800377e:	2b06      	cmp	r3, #6
 8003780:	d902      	bls.n	8003788 <NVIC_EncodePriority+0x30>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3b03      	subs	r3, #3
 8003786:	e000      	b.n	800378a <NVIC_EncodePriority+0x32>
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	f04f 32ff 	mov.w	r2, #4294967295
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43da      	mvns	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	401a      	ands	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a0:	f04f 31ff 	mov.w	r1, #4294967295
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	43d9      	mvns	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	4313      	orrs	r3, r2
         );
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3724      	adds	r7, #36	; 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037cc:	d301      	bcc.n	80037d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ce:	2301      	movs	r3, #1
 80037d0:	e00f      	b.n	80037f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d2:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <SysTick_Config+0x40>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037da:	210f      	movs	r1, #15
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295
 80037e0:	f7ff ff90 	bl	8003704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <SysTick_Config+0x40>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ea:	4b04      	ldr	r3, [pc, #16]	; (80037fc <SysTick_Config+0x40>)
 80037ec:	2207      	movs	r2, #7
 80037ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	e000e010 	.word	0xe000e010

08003800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff2d 	bl	8003668 <__NVIC_SetPriorityGrouping>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	4603      	mov	r3, r0
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003828:	f7ff ff42 	bl	80036b0 <__NVIC_GetPriorityGrouping>
 800382c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	6978      	ldr	r0, [r7, #20]
 8003834:	f7ff ff90 	bl	8003758 <NVIC_EncodePriority>
 8003838:	4602      	mov	r2, r0
 800383a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff5f 	bl	8003704 <__NVIC_SetPriority>
}
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff35 	bl	80036cc <__NVIC_EnableIRQ>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ffa2 	bl	80037bc <SysTick_Config>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003884:	b480      	push	{r7}
 8003886:	b08b      	sub	sp, #44	; 0x2c
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800388e:	2300      	movs	r3, #0
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003896:	e169      	b.n	8003b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003898:	2201      	movs	r2, #1
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	f040 8158 	bne.w	8003b66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4a9a      	ldr	r2, [pc, #616]	; (8003b24 <HAL_GPIO_Init+0x2a0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d05e      	beq.n	800397e <HAL_GPIO_Init+0xfa>
 80038c0:	4a98      	ldr	r2, [pc, #608]	; (8003b24 <HAL_GPIO_Init+0x2a0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d875      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038c6:	4a98      	ldr	r2, [pc, #608]	; (8003b28 <HAL_GPIO_Init+0x2a4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d058      	beq.n	800397e <HAL_GPIO_Init+0xfa>
 80038cc:	4a96      	ldr	r2, [pc, #600]	; (8003b28 <HAL_GPIO_Init+0x2a4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d86f      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038d2:	4a96      	ldr	r2, [pc, #600]	; (8003b2c <HAL_GPIO_Init+0x2a8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d052      	beq.n	800397e <HAL_GPIO_Init+0xfa>
 80038d8:	4a94      	ldr	r2, [pc, #592]	; (8003b2c <HAL_GPIO_Init+0x2a8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d869      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038de:	4a94      	ldr	r2, [pc, #592]	; (8003b30 <HAL_GPIO_Init+0x2ac>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d04c      	beq.n	800397e <HAL_GPIO_Init+0xfa>
 80038e4:	4a92      	ldr	r2, [pc, #584]	; (8003b30 <HAL_GPIO_Init+0x2ac>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d863      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038ea:	4a92      	ldr	r2, [pc, #584]	; (8003b34 <HAL_GPIO_Init+0x2b0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d046      	beq.n	800397e <HAL_GPIO_Init+0xfa>
 80038f0:	4a90      	ldr	r2, [pc, #576]	; (8003b34 <HAL_GPIO_Init+0x2b0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d85d      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038f6:	2b12      	cmp	r3, #18
 80038f8:	d82a      	bhi.n	8003950 <HAL_GPIO_Init+0xcc>
 80038fa:	2b12      	cmp	r3, #18
 80038fc:	d859      	bhi.n	80039b2 <HAL_GPIO_Init+0x12e>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <HAL_GPIO_Init+0x80>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	0800397f 	.word	0x0800397f
 8003908:	08003959 	.word	0x08003959
 800390c:	0800396b 	.word	0x0800396b
 8003910:	080039ad 	.word	0x080039ad
 8003914:	080039b3 	.word	0x080039b3
 8003918:	080039b3 	.word	0x080039b3
 800391c:	080039b3 	.word	0x080039b3
 8003920:	080039b3 	.word	0x080039b3
 8003924:	080039b3 	.word	0x080039b3
 8003928:	080039b3 	.word	0x080039b3
 800392c:	080039b3 	.word	0x080039b3
 8003930:	080039b3 	.word	0x080039b3
 8003934:	080039b3 	.word	0x080039b3
 8003938:	080039b3 	.word	0x080039b3
 800393c:	080039b3 	.word	0x080039b3
 8003940:	080039b3 	.word	0x080039b3
 8003944:	080039b3 	.word	0x080039b3
 8003948:	08003961 	.word	0x08003961
 800394c:	08003975 	.word	0x08003975
 8003950:	4a79      	ldr	r2, [pc, #484]	; (8003b38 <HAL_GPIO_Init+0x2b4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003956:	e02c      	b.n	80039b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	623b      	str	r3, [r7, #32]
          break;
 800395e:	e029      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	3304      	adds	r3, #4
 8003966:	623b      	str	r3, [r7, #32]
          break;
 8003968:	e024      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	3308      	adds	r3, #8
 8003970:	623b      	str	r3, [r7, #32]
          break;
 8003972:	e01f      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	330c      	adds	r3, #12
 800397a:	623b      	str	r3, [r7, #32]
          break;
 800397c:	e01a      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003986:	2304      	movs	r3, #4
 8003988:	623b      	str	r3, [r7, #32]
          break;
 800398a:	e013      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d105      	bne.n	80039a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003994:	2308      	movs	r3, #8
 8003996:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	611a      	str	r2, [r3, #16]
          break;
 800399e:	e009      	b.n	80039b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039a0:	2308      	movs	r3, #8
 80039a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	615a      	str	r2, [r3, #20]
          break;
 80039aa:	e003      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039ac:	2300      	movs	r3, #0
 80039ae:	623b      	str	r3, [r7, #32]
          break;
 80039b0:	e000      	b.n	80039b4 <HAL_GPIO_Init+0x130>
          break;
 80039b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2bff      	cmp	r3, #255	; 0xff
 80039b8:	d801      	bhi.n	80039be <HAL_GPIO_Init+0x13a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	e001      	b.n	80039c2 <HAL_GPIO_Init+0x13e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2bff      	cmp	r3, #255	; 0xff
 80039c8:	d802      	bhi.n	80039d0 <HAL_GPIO_Init+0x14c>
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	e002      	b.n	80039d6 <HAL_GPIO_Init+0x152>
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	3b08      	subs	r3, #8
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	210f      	movs	r1, #15
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	fa01 f303 	lsl.w	r3, r1, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	401a      	ands	r2, r3
 80039e8:	6a39      	ldr	r1, [r7, #32]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	431a      	orrs	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80b1 	beq.w	8003b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a04:	4b4d      	ldr	r3, [pc, #308]	; (8003b3c <HAL_GPIO_Init+0x2b8>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	4a4c      	ldr	r2, [pc, #304]	; (8003b3c <HAL_GPIO_Init+0x2b8>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6193      	str	r3, [r2, #24]
 8003a10:	4b4a      	ldr	r3, [pc, #296]	; (8003b3c <HAL_GPIO_Init+0x2b8>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a1c:	4a48      	ldr	r2, [pc, #288]	; (8003b40 <HAL_GPIO_Init+0x2bc>)
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	3302      	adds	r3, #2
 8003a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	220f      	movs	r2, #15
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a40      	ldr	r2, [pc, #256]	; (8003b44 <HAL_GPIO_Init+0x2c0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_GPIO_Init+0x1ec>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a3f      	ldr	r2, [pc, #252]	; (8003b48 <HAL_GPIO_Init+0x2c4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00d      	beq.n	8003a6c <HAL_GPIO_Init+0x1e8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3e      	ldr	r2, [pc, #248]	; (8003b4c <HAL_GPIO_Init+0x2c8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <HAL_GPIO_Init+0x1e4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3d      	ldr	r2, [pc, #244]	; (8003b50 <HAL_GPIO_Init+0x2cc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_GPIO_Init+0x1e0>
 8003a60:	2303      	movs	r3, #3
 8003a62:	e006      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a64:	2304      	movs	r3, #4
 8003a66:	e004      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e002      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_GPIO_Init+0x1ee>
 8003a70:	2300      	movs	r3, #0
 8003a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a74:	f002 0203 	and.w	r2, r2, #3
 8003a78:	0092      	lsls	r2, r2, #2
 8003a7a:	4093      	lsls	r3, r2
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a82:	492f      	ldr	r1, [pc, #188]	; (8003b40 <HAL_GPIO_Init+0x2bc>)
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	089b      	lsrs	r3, r3, #2
 8003a88:	3302      	adds	r3, #2
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d006      	beq.n	8003aaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	492c      	ldr	r1, [pc, #176]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
 8003aa8:	e006      	b.n	8003ab8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003aaa:	4b2a      	ldr	r3, [pc, #168]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	4928      	ldr	r1, [pc, #160]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d006      	beq.n	8003ad2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ac4:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4922      	ldr	r1, [pc, #136]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
 8003ad0:	e006      	b.n	8003ae0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ad2:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	491e      	ldr	r1, [pc, #120]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d006      	beq.n	8003afa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	4918      	ldr	r1, [pc, #96]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]
 8003af8:	e006      	b.n	8003b08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003afa:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	4914      	ldr	r1, [pc, #80]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d021      	beq.n	8003b58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	490e      	ldr	r1, [pc, #56]	; (8003b54 <HAL_GPIO_Init+0x2d0>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60cb      	str	r3, [r1, #12]
 8003b20:	e021      	b.n	8003b66 <HAL_GPIO_Init+0x2e2>
 8003b22:	bf00      	nop
 8003b24:	10320000 	.word	0x10320000
 8003b28:	10310000 	.word	0x10310000
 8003b2c:	10220000 	.word	0x10220000
 8003b30:	10210000 	.word	0x10210000
 8003b34:	10120000 	.word	0x10120000
 8003b38:	10110000 	.word	0x10110000
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40010800 	.word	0x40010800
 8003b48:	40010c00 	.word	0x40010c00
 8003b4c:	40011000 	.word	0x40011000
 8003b50:	40011400 	.word	0x40011400
 8003b54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_GPIO_Init+0x304>)
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	4909      	ldr	r1, [pc, #36]	; (8003b88 <HAL_GPIO_Init+0x304>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	3301      	adds	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f47f ae8e 	bne.w	8003898 <HAL_GPIO_Init+0x14>
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	372c      	adds	r7, #44	; 0x2c
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	40010400 	.word	0x40010400

08003b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e001      	b.n	8003bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr

08003bba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	807b      	strh	r3, [r7, #2]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bca:	787b      	ldrb	r3, [r7, #1]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd0:	887a      	ldrh	r2, [r7, #2]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bd6:	e003      	b.n	8003be0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bd8:	887b      	ldrh	r3, [r7, #2]
 8003bda:	041a      	lsls	r2, r3, #16
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	611a      	str	r2, [r3, #16]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
	...

08003bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bf6:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c02:	4a05      	ldr	r2, [pc, #20]	; (8003c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fc fc12 	bl	8000434 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40010400 	.word	0x40010400

08003c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e12b      	b.n	8003e86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd f91e 	bl	8000e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c80:	f000 ffea 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8003c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4a81      	ldr	r2, [pc, #516]	; (8003e90 <HAL_I2C_Init+0x274>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d807      	bhi.n	8003ca0 <HAL_I2C_Init+0x84>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a80      	ldr	r2, [pc, #512]	; (8003e94 <HAL_I2C_Init+0x278>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	bf94      	ite	ls
 8003c98:	2301      	movls	r3, #1
 8003c9a:	2300      	movhi	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e006      	b.n	8003cae <HAL_I2C_Init+0x92>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a7d      	ldr	r2, [pc, #500]	; (8003e98 <HAL_I2C_Init+0x27c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	bf94      	ite	ls
 8003ca8:	2301      	movls	r3, #1
 8003caa:	2300      	movhi	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0e7      	b.n	8003e86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a78      	ldr	r2, [pc, #480]	; (8003e9c <HAL_I2C_Init+0x280>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0c9b      	lsrs	r3, r3, #18
 8003cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a6a      	ldr	r2, [pc, #424]	; (8003e90 <HAL_I2C_Init+0x274>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d802      	bhi.n	8003cf0 <HAL_I2C_Init+0xd4>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	3301      	adds	r3, #1
 8003cee:	e009      	b.n	8003d04 <HAL_I2C_Init+0xe8>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	4a69      	ldr	r2, [pc, #420]	; (8003ea0 <HAL_I2C_Init+0x284>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	3301      	adds	r3, #1
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	495c      	ldr	r1, [pc, #368]	; (8003e90 <HAL_I2C_Init+0x274>)
 8003d20:	428b      	cmp	r3, r1
 8003d22:	d819      	bhi.n	8003d58 <HAL_I2C_Init+0x13c>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e59      	subs	r1, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d38:	400b      	ands	r3, r1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_I2C_Init+0x138>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1e59      	subs	r1, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d52:	e051      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003d54:	2304      	movs	r3, #4
 8003d56:	e04f      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d111      	bne.n	8003d84 <HAL_I2C_Init+0x168>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1e58      	subs	r0, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	440b      	add	r3, r1
 8003d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e012      	b.n	8003daa <HAL_I2C_Init+0x18e>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1e58      	subs	r0, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	0099      	lsls	r1, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Init+0x196>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e022      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10e      	bne.n	8003dd8 <HAL_I2C_Init+0x1bc>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1e58      	subs	r0, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	440b      	add	r3, r1
 8003dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd6:	e00f      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1e58      	subs	r0, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	0099      	lsls	r1, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	6809      	ldr	r1, [r1, #0]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6911      	ldr	r1, [r2, #16]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68d2      	ldr	r2, [r2, #12]
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	000186a0 	.word	0x000186a0
 8003e94:	001e847f 	.word	0x001e847f
 8003e98:	003d08ff 	.word	0x003d08ff
 8003e9c:	431bde83 	.word	0x431bde83
 8003ea0:	10624dd3 	.word	0x10624dd3

08003ea4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	817b      	strh	r3, [r7, #10]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eb8:	f7ff f882 	bl	8002fc0 <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	f040 80e0 	bne.w	800408c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2319      	movs	r3, #25
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	4970      	ldr	r1, [pc, #448]	; (8004098 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f964 	bl	80041a4 <I2C_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e0d3      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_I2C_Master_Transmit+0x50>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e0cc      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d007      	beq.n	8003f1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2221      	movs	r2, #33	; 0x21
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2210      	movs	r2, #16
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	893a      	ldrh	r2, [r7, #8]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a50      	ldr	r2, [pc, #320]	; (800409c <HAL_I2C_Master_Transmit+0x1f8>)
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f5c:	8979      	ldrh	r1, [r7, #10]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f89c 	bl	80040a0 <I2C_MasterRequestWrite>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e08d      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f88:	e066      	b.n	8004058 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	6a39      	ldr	r1, [r7, #32]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f9de 	bl	8004350 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00d      	beq.n	8003fb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d107      	bne.n	8003fb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e06b      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	781a      	ldrb	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d11b      	bne.n	800402c <HAL_I2C_Master_Transmit+0x188>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	6a39      	ldr	r1, [r7, #32]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f9ce 	bl	80043d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2b04      	cmp	r3, #4
 8004042:	d107      	bne.n	8004054 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004052:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e01a      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d194      	bne.n	8003f8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	00100002 	.word	0x00100002
 800409c:	ffff0000 	.word	0xffff0000

080040a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	460b      	mov	r3, r1
 80040ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d006      	beq.n	80040ca <I2C_MasterRequestWrite+0x2a>
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d003      	beq.n	80040ca <I2C_MasterRequestWrite+0x2a>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040c8:	d108      	bne.n	80040dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e00b      	b.n	80040f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	2b12      	cmp	r3, #18
 80040e2:	d107      	bne.n	80040f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f84f 	bl	80041a4 <I2C_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411a:	d103      	bne.n	8004124 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e035      	b.n	8004194 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004130:	d108      	bne.n	8004144 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004132:	897b      	ldrh	r3, [r7, #10]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004140:	611a      	str	r2, [r3, #16]
 8004142:	e01b      	b.n	800417c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004144:	897b      	ldrh	r3, [r7, #10]
 8004146:	11db      	asrs	r3, r3, #7
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f003 0306 	and.w	r3, r3, #6
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f063 030f 	orn	r3, r3, #15
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	490e      	ldr	r1, [pc, #56]	; (800419c <I2C_MasterRequestWrite+0xfc>)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f875 	bl	8004252 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e010      	b.n	8004194 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004172:	897b      	ldrh	r3, [r7, #10]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	4907      	ldr	r1, [pc, #28]	; (80041a0 <I2C_MasterRequestWrite+0x100>)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f865 	bl	8004252 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	00010008 	.word	0x00010008
 80041a0:	00010002 	.word	0x00010002

080041a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b4:	e025      	b.n	8004202 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d021      	beq.n	8004202 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041be:	f7fe feff 	bl	8002fc0 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d116      	bne.n	8004202 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f043 0220 	orr.w	r2, r3, #32
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e023      	b.n	800424a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d10d      	bne.n	8004228 <I2C_WaitOnFlagUntilTimeout+0x84>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	43da      	mvns	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	e00c      	b.n	8004242 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	43da      	mvns	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4013      	ands	r3, r2
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf0c      	ite	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	2300      	movne	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	429a      	cmp	r2, r3
 8004246:	d0b6      	beq.n	80041b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004260:	e051      	b.n	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004270:	d123      	bne.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004280:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800428a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f043 0204 	orr.w	r2, r3, #4
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e046      	b.n	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d021      	beq.n	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fe fe7d 	bl	8002fc0 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d116      	bne.n	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f043 0220 	orr.w	r2, r3, #32
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e020      	b.n	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10c      	bne.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	43da      	mvns	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4013      	ands	r3, r2
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e00b      	b.n	8004342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	43da      	mvns	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d18d      	bne.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800435c:	e02d      	b.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f878 	bl	8004454 <I2C_IsAcknowledgeFailed>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e02d      	b.n	80043ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d021      	beq.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7fe fe23 	bl	8002fc0 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d116      	bne.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e007      	b.n	80043ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b80      	cmp	r3, #128	; 0x80
 80043c6:	d1ca      	bne.n	800435e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043de:	e02d      	b.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f837 	bl	8004454 <I2C_IsAcknowledgeFailed>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e02d      	b.n	800444c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f6:	d021      	beq.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f8:	f7fe fde2 	bl	8002fc0 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	429a      	cmp	r2, r3
 8004406:	d302      	bcc.n	800440e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d116      	bne.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e007      	b.n	800444c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b04      	cmp	r3, #4
 8004448:	d1ca      	bne.n	80043e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446a:	d11b      	bne.n	80044a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004474:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f043 0204 	orr.w	r2, r3, #4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e272      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8087 	beq.w	80045de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d0:	4b92      	ldr	r3, [pc, #584]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d00c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044dc:	4b8f      	ldr	r3, [pc, #572]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d112      	bne.n	800450e <HAL_RCC_OscConfig+0x5e>
 80044e8:	4b8c      	ldr	r3, [pc, #560]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f4:	d10b      	bne.n	800450e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f6:	4b89      	ldr	r3, [pc, #548]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d06c      	beq.n	80045dc <HAL_RCC_OscConfig+0x12c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d168      	bne.n	80045dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e24c      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x76>
 8004518:	4b80      	ldr	r3, [pc, #512]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a7f      	ldr	r2, [pc, #508]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	e02e      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x98>
 800452e:	4b7b      	ldr	r3, [pc, #492]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7a      	ldr	r2, [pc, #488]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b78      	ldr	r3, [pc, #480]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a77      	ldr	r2, [pc, #476]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e01d      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0xbc>
 8004552:	4b72      	ldr	r3, [pc, #456]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a71      	ldr	r2, [pc, #452]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6e      	ldr	r2, [pc, #440]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 800456c:	4b6b      	ldr	r3, [pc, #428]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6a      	ldr	r2, [pc, #424]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b68      	ldr	r3, [pc, #416]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a67      	ldr	r2, [pc, #412]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800457e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fe fd18 	bl	8002fc0 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fe fd14 	bl	8002fc0 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e200      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b5d      	ldr	r3, [pc, #372]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0xe4>
 80045b2:	e014      	b.n	80045de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fe fd04 	bl	8002fc0 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fe fd00 	bl	8002fc0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1ec      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	4b53      	ldr	r3, [pc, #332]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x10c>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d063      	beq.n	80046b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ea:	4b4c      	ldr	r3, [pc, #304]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045f6:	4b49      	ldr	r3, [pc, #292]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d11c      	bne.n	800463c <HAL_RCC_OscConfig+0x18c>
 8004602:	4b46      	ldr	r3, [pc, #280]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	4b43      	ldr	r3, [pc, #268]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x176>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e1c0      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4b3d      	ldr	r3, [pc, #244]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4939      	ldr	r1, [pc, #228]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	e03a      	b.n	80046b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004644:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_RCC_OscConfig+0x270>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464a:	f7fe fcb9 	bl	8002fc0 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004652:	f7fe fcb5 	bl	8002fc0 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e1a1      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	4b2d      	ldr	r3, [pc, #180]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004670:	4b2a      	ldr	r3, [pc, #168]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4927      	ldr	r1, [pc, #156]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004686:	4b26      	ldr	r3, [pc, #152]	; (8004720 <HAL_RCC_OscConfig+0x270>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fe fc98 	bl	8002fc0 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004694:	f7fe fc94 	bl	8002fc0 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e180      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d03a      	beq.n	8004734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d019      	beq.n	80046fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c6:	4b17      	ldr	r3, [pc, #92]	; (8004724 <HAL_RCC_OscConfig+0x274>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046cc:	f7fe fc78 	bl	8002fc0 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fe fc74 	bl	8002fc0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e160      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046f2:	2001      	movs	r0, #1
 80046f4:	f000 fac4 	bl	8004c80 <RCC_Delay>
 80046f8:	e01c      	b.n	8004734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <HAL_RCC_OscConfig+0x274>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004700:	f7fe fc5e 	bl	8002fc0 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004706:	e00f      	b.n	8004728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004708:	f7fe fc5a 	bl	8002fc0 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d908      	bls.n	8004728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e146      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
 8004720:	42420000 	.word	0x42420000
 8004724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b92      	ldr	r3, [pc, #584]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e9      	bne.n	8004708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a6 	beq.w	800488e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004746:	4b8b      	ldr	r3, [pc, #556]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10d      	bne.n	800476e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	4b88      	ldr	r3, [pc, #544]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	4a87      	ldr	r2, [pc, #540]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475c:	61d3      	str	r3, [r2, #28]
 800475e:	4b85      	ldr	r3, [pc, #532]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	4b82      	ldr	r3, [pc, #520]	; (8004978 <HAL_RCC_OscConfig+0x4c8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d118      	bne.n	80047ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477a:	4b7f      	ldr	r3, [pc, #508]	; (8004978 <HAL_RCC_OscConfig+0x4c8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7e      	ldr	r2, [pc, #504]	; (8004978 <HAL_RCC_OscConfig+0x4c8>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004786:	f7fe fc1b 	bl	8002fc0 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478e:	f7fe fc17 	bl	8002fc0 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b64      	cmp	r3, #100	; 0x64
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e103      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	4b75      	ldr	r3, [pc, #468]	; (8004978 <HAL_RCC_OscConfig+0x4c8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x312>
 80047b4:	4b6f      	ldr	r3, [pc, #444]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4a6e      	ldr	r2, [pc, #440]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6213      	str	r3, [r2, #32]
 80047c0:	e02d      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x334>
 80047ca:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a69      	ldr	r2, [pc, #420]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	6213      	str	r3, [r2, #32]
 80047d6:	4b67      	ldr	r3, [pc, #412]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a66      	ldr	r2, [pc, #408]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	6213      	str	r3, [r2, #32]
 80047e2:	e01c      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2b05      	cmp	r3, #5
 80047ea:	d10c      	bne.n	8004806 <HAL_RCC_OscConfig+0x356>
 80047ec:	4b61      	ldr	r3, [pc, #388]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	4a60      	ldr	r2, [pc, #384]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	f043 0304 	orr.w	r3, r3, #4
 80047f6:	6213      	str	r3, [r2, #32]
 80047f8:	4b5e      	ldr	r3, [pc, #376]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	4a5d      	ldr	r2, [pc, #372]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	6213      	str	r3, [r2, #32]
 8004804:	e00b      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 8004806:	4b5b      	ldr	r3, [pc, #364]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	4a5a      	ldr	r2, [pc, #360]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	6213      	str	r3, [r2, #32]
 8004812:	4b58      	ldr	r3, [pc, #352]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4a57      	ldr	r2, [pc, #348]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	f023 0304 	bic.w	r3, r3, #4
 800481c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d015      	beq.n	8004852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004826:	f7fe fbcb 	bl	8002fc0 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482c:	e00a      	b.n	8004844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482e:	f7fe fbc7 	bl	8002fc0 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f241 3288 	movw	r2, #5000	; 0x1388
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e0b1      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004844:	4b4b      	ldr	r3, [pc, #300]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0ee      	beq.n	800482e <HAL_RCC_OscConfig+0x37e>
 8004850:	e014      	b.n	800487c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004852:	f7fe fbb5 	bl	8002fc0 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fe fbb1 	bl	8002fc0 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e09b      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004870:	4b40      	ldr	r3, [pc, #256]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ee      	bne.n	800485a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004882:	4b3c      	ldr	r3, [pc, #240]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	4a3b      	ldr	r2, [pc, #236]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8087 	beq.w	80049a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004898:	4b36      	ldr	r3, [pc, #216]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d061      	beq.n	8004968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d146      	bne.n	800493a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ac:	4b33      	ldr	r3, [pc, #204]	; (800497c <HAL_RCC_OscConfig+0x4cc>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b2:	f7fe fb85 	bl	8002fc0 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ba:	f7fe fb81 	bl	8002fc0 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e06d      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048cc:	4b29      	ldr	r3, [pc, #164]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f0      	bne.n	80048ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d108      	bne.n	80048f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048e2:	4b24      	ldr	r3, [pc, #144]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	4921      	ldr	r1, [pc, #132]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f4:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a19      	ldr	r1, [r3, #32]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	430b      	orrs	r3, r1
 8004906:	491b      	ldr	r1, [pc, #108]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490c:	4b1b      	ldr	r3, [pc, #108]	; (800497c <HAL_RCC_OscConfig+0x4cc>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fe fb55 	bl	8002fc0 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491a:	f7fe fb51 	bl	8002fc0 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e03d      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x46a>
 8004938:	e035      	b.n	80049a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493a:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_RCC_OscConfig+0x4cc>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fe fb3e 	bl	8002fc0 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fe fb3a 	bl	8002fc0 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e026      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x498>
 8004966:	e01e      	b.n	80049a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e019      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
 8004974:	40021000 	.word	0x40021000
 8004978:	40007000 	.word	0x40007000
 800497c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCC_OscConfig+0x500>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	429a      	cmp	r2, r3
 8004992:	d106      	bne.n	80049a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	429a      	cmp	r2, r3
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000

080049b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0d0      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c8:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d910      	bls.n	80049f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b67      	ldr	r3, [pc, #412]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 0207 	bic.w	r2, r3, #7
 80049de:	4965      	ldr	r1, [pc, #404]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b63      	ldr	r3, [pc, #396]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0b8      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d020      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a10:	4b59      	ldr	r3, [pc, #356]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a58      	ldr	r2, [pc, #352]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a28:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a52      	ldr	r2, [pc, #328]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a34:	4b50      	ldr	r3, [pc, #320]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	494d      	ldr	r1, [pc, #308]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d040      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d107      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d115      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e07f      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d107      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a72:	4b41      	ldr	r3, [pc, #260]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e073      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a82:	4b3d      	ldr	r3, [pc, #244]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e06b      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a92:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f023 0203 	bic.w	r2, r3, #3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	4936      	ldr	r1, [pc, #216]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa4:	f7fe fa8c 	bl	8002fc0 <HAL_GetTick>
 8004aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aac:	f7fe fa88 	bl	8002fc0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e053      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac2:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 020c 	and.w	r2, r3, #12
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d1eb      	bne.n	8004aac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d210      	bcs.n	8004b04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 0207 	bic.w	r2, r3, #7
 8004aea:	4922      	ldr	r1, [pc, #136]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af2:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e032      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b10:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4916      	ldr	r1, [pc, #88]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	490e      	ldr	r1, [pc, #56]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b42:	f000 f821 	bl	8004b88 <HAL_RCC_GetSysClockFreq>
 8004b46:	4602      	mov	r2, r0
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	490a      	ldr	r1, [pc, #40]	; (8004b7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b54:	5ccb      	ldrb	r3, [r1, r3]
 8004b56:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5a:	4a09      	ldr	r2, [pc, #36]	; (8004b80 <HAL_RCC_ClockConfig+0x1cc>)
 8004b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <HAL_RCC_ClockConfig+0x1d0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe f9ea 	bl	8002f3c <HAL_InitTick>

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40022000 	.word	0x40022000
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	08005ecc 	.word	0x08005ecc
 8004b80:	20000000 	.word	0x20000000
 8004b84:	20000004 	.word	0x20000004

08004b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b88:	b490      	push	{r4, r7}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b8e:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <HAL_RCC_GetSysClockFreq+0xac>)
 8004b90:	1d3c      	adds	r4, r7, #4
 8004b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b98:	f240 2301 	movw	r3, #513	; 0x201
 8004b9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bb2:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d002      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x46>
 8004bc6:	e02b      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bc8:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bca:	623b      	str	r3, [r7, #32]
      break;
 8004bcc:	e02b      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	0c9b      	lsrs	r3, r3, #18
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	3328      	adds	r3, #40	; 0x28
 8004bd8:	443b      	add	r3, r7
 8004bda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bde:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d012      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0c5b      	lsrs	r3, r3, #17
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	3328      	adds	r3, #40	; 0x28
 8004bf6:	443b      	add	r3, r7
 8004bf8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bfc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	4a0e      	ldr	r2, [pc, #56]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c02:	fb03 f202 	mul.w	r2, r3, r2
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0e:	e004      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c14:	fb02 f303 	mul.w	r3, r2, r3
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	623b      	str	r3, [r7, #32]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c22:	623b      	str	r3, [r7, #32]
      break;
 8004c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c26:	6a3b      	ldr	r3, [r7, #32]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3728      	adds	r7, #40	; 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc90      	pop	{r4, r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	08005ebc 	.word	0x08005ebc
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	007a1200 	.word	0x007a1200
 8004c40:	003d0900 	.word	0x003d0900

08004c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c48:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	20000000 	.word	0x20000000

08004c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c5c:	f7ff fff2 	bl	8004c44 <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	0a1b      	lsrs	r3, r3, #8
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4903      	ldr	r1, [pc, #12]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	08005edc 	.word	0x08005edc

08004c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <RCC_Delay+0x34>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <RCC_Delay+0x38>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	0a5b      	lsrs	r3, r3, #9
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c9c:	bf00      	nop
  }
  while (Delay --);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1e5a      	subs	r2, r3, #1
 8004ca2:	60fa      	str	r2, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f9      	bne.n	8004c9c <RCC_Delay+0x1c>
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr
 8004cb4:	20000000 	.word	0x20000000
 8004cb8:	10624dd3 	.word	0x10624dd3

08004cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d07d      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cdc:	4b4f      	ldr	r3, [pc, #316]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10d      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce8:	4b4c      	ldr	r3, [pc, #304]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	4a4b      	ldr	r2, [pc, #300]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	61d3      	str	r3, [r2, #28]
 8004cf4:	4b49      	ldr	r3, [pc, #292]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d00:	2301      	movs	r3, #1
 8004d02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	4b46      	ldr	r3, [pc, #280]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d118      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d10:	4b43      	ldr	r3, [pc, #268]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a42      	ldr	r2, [pc, #264]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1c:	f7fe f950 	bl	8002fc0 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d22:	e008      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d24:	f7fe f94c 	bl	8002fc0 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e06d      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d36:	4b3a      	ldr	r3, [pc, #232]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d42:	4b36      	ldr	r3, [pc, #216]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d02e      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d027      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d60:	4b2e      	ldr	r3, [pc, #184]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d6a:	4b2e      	ldr	r3, [pc, #184]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d70:	4b2c      	ldr	r3, [pc, #176]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d76:	4a29      	ldr	r2, [pc, #164]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d014      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d86:	f7fe f91b 	bl	8002fc0 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fe f917 	bl	8002fc0 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e036      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	4b1d      	ldr	r3, [pc, #116]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ee      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db0:	4b1a      	ldr	r3, [pc, #104]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4917      	ldr	r1, [pc, #92]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004de0:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	490b      	ldr	r1, [pc, #44]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dfe:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	4904      	ldr	r1, [pc, #16]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	40007000 	.word	0x40007000
 8004e24:	42420440 	.word	0x42420440

08004e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e041      	b.n	8004ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fc f87e 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f000 fc84 	bl	8005774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d001      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e03a      	b.n	8004f56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <HAL_TIM_Base_Start_IT+0x98>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00e      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x58>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0a:	d009      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x58>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a14      	ldr	r2, [pc, #80]	; (8004f64 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x58>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d111      	bne.n	8004f44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b06      	cmp	r3, #6
 8004f30:	d010      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	e007      	b.n	8004f54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40000800 	.word	0x40000800

08004f6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e041      	b.n	8005002 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fb ffb6 	bl	8000f04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f000 fbe2 	bl	8005774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d109      	bne.n	8005030 <HAL_TIM_PWM_Start+0x24>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	bf14      	ite	ne
 8005028:	2301      	movne	r3, #1
 800502a:	2300      	moveq	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	e022      	b.n	8005076 <HAL_TIM_PWM_Start+0x6a>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b04      	cmp	r3, #4
 8005034:	d109      	bne.n	800504a <HAL_TIM_PWM_Start+0x3e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b01      	cmp	r3, #1
 8005040:	bf14      	ite	ne
 8005042:	2301      	movne	r3, #1
 8005044:	2300      	moveq	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	e015      	b.n	8005076 <HAL_TIM_PWM_Start+0x6a>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d109      	bne.n	8005064 <HAL_TIM_PWM_Start+0x58>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	bf14      	ite	ne
 800505c:	2301      	movne	r3, #1
 800505e:	2300      	moveq	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	e008      	b.n	8005076 <HAL_TIM_PWM_Start+0x6a>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e05e      	b.n	800513c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d104      	bne.n	800508e <HAL_TIM_PWM_Start+0x82>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800508c:	e013      	b.n	80050b6 <HAL_TIM_PWM_Start+0xaa>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b04      	cmp	r3, #4
 8005092:	d104      	bne.n	800509e <HAL_TIM_PWM_Start+0x92>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800509c:	e00b      	b.n	80050b6 <HAL_TIM_PWM_Start+0xaa>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d104      	bne.n	80050ae <HAL_TIM_PWM_Start+0xa2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ac:	e003      	b.n	80050b6 <HAL_TIM_PWM_Start+0xaa>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2201      	movs	r2, #1
 80050bc:	6839      	ldr	r1, [r7, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fdd8 	bl	8005c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <HAL_TIM_PWM_Start+0x138>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d107      	bne.n	80050de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a18      	ldr	r2, [pc, #96]	; (8005144 <HAL_TIM_PWM_Start+0x138>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_TIM_PWM_Start+0xfa>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f0:	d009      	beq.n	8005106 <HAL_TIM_PWM_Start+0xfa>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a14      	ldr	r2, [pc, #80]	; (8005148 <HAL_TIM_PWM_Start+0x13c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIM_PWM_Start+0xfa>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a12      	ldr	r2, [pc, #72]	; (800514c <HAL_TIM_PWM_Start+0x140>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d111      	bne.n	800512a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b06      	cmp	r3, #6
 8005116:	d010      	beq.n	800513a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005128:	e007      	b.n	800513a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40000400 	.word	0x40000400
 800514c:	40000800 	.word	0x40000800

08005150 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fd86 	bl	8005c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a29      	ldr	r2, [pc, #164]	; (8005214 <HAL_TIM_PWM_Stop+0xc4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d117      	bne.n	80051a2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a1a      	ldr	r2, [r3, #32]
 8005178:	f241 1311 	movw	r3, #4369	; 0x1111
 800517c:	4013      	ands	r3, r2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10f      	bne.n	80051a2 <HAL_TIM_PWM_Stop+0x52>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	f240 4344 	movw	r3, #1092	; 0x444
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d107      	bne.n	80051a2 <HAL_TIM_PWM_Stop+0x52>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10f      	bne.n	80051d2 <HAL_TIM_PWM_Stop+0x82>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a1a      	ldr	r2, [r3, #32]
 80051b8:	f240 4344 	movw	r3, #1092	; 0x444
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d107      	bne.n	80051d2 <HAL_TIM_PWM_Stop+0x82>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Stop+0x92>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e0:	e013      	b.n	800520a <HAL_TIM_PWM_Stop+0xba>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Stop+0xa2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f0:	e00b      	b.n	800520a <HAL_TIM_PWM_Stop+0xba>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Stop+0xb2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005200:	e003      	b.n	800520a <HAL_TIM_PWM_Stop+0xba>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40012c00 	.word	0x40012c00

08005218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0202 	mvn.w	r2, #2
 8005244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fa6f 	bl	800573e <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa62 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fa71 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b04      	cmp	r3, #4
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b04      	cmp	r3, #4
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0204 	mvn.w	r2, #4
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa45 	bl	800573e <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa38 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fa47 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d122      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d11b      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0208 	mvn.w	r2, #8
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2204      	movs	r2, #4
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa1b 	bl	800573e <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa0e 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fa1d 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b10      	cmp	r3, #16
 8005328:	d122      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b10      	cmp	r3, #16
 8005336:	d11b      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0210 	mvn.w	r2, #16
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2208      	movs	r2, #8
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f9f1 	bl	800573e <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f9e4 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f9f3 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b01      	cmp	r3, #1
 800537c:	d10e      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d107      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0201 	mvn.w	r2, #1
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fb fc80 	bl	8000c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d10e      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fd32 	bl	8005e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b40      	cmp	r3, #64	; 0x40
 80053d4:	d10e      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d107      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9b7 	bl	8005762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d10e      	bne.n	8005420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b20      	cmp	r3, #32
 800540e:	d107      	bne.n	8005420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0220 	mvn.w	r2, #32
 8005418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fcfd 	bl	8005e1a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800543e:	2302      	movs	r3, #2
 8005440:	e0ac      	b.n	800559c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b0c      	cmp	r3, #12
 800544e:	f200 809f 	bhi.w	8005590 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005452:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	0800548d 	.word	0x0800548d
 800545c:	08005591 	.word	0x08005591
 8005460:	08005591 	.word	0x08005591
 8005464:	08005591 	.word	0x08005591
 8005468:	080054cd 	.word	0x080054cd
 800546c:	08005591 	.word	0x08005591
 8005470:	08005591 	.word	0x08005591
 8005474:	08005591 	.word	0x08005591
 8005478:	0800550f 	.word	0x0800550f
 800547c:	08005591 	.word	0x08005591
 8005480:	08005591 	.word	0x08005591
 8005484:	08005591 	.word	0x08005591
 8005488:	0800554f 	.word	0x0800554f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	4618      	mov	r0, r3
 8005494:	f000 f9d0 	bl	8005838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0208 	orr.w	r2, r2, #8
 80054a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0204 	bic.w	r2, r2, #4
 80054b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6999      	ldr	r1, [r3, #24]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	619a      	str	r2, [r3, #24]
      break;
 80054ca:	e062      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fa16 	bl	8005904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6999      	ldr	r1, [r3, #24]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	021a      	lsls	r2, r3, #8
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	619a      	str	r2, [r3, #24]
      break;
 800550c:	e041      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fa5f 	bl	80059d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0208 	orr.w	r2, r2, #8
 8005528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0204 	bic.w	r2, r2, #4
 8005538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69d9      	ldr	r1, [r3, #28]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	61da      	str	r2, [r3, #28]
      break;
 800554c:	e021      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68b9      	ldr	r1, [r7, #8]
 8005554:	4618      	mov	r0, r3
 8005556:	f000 faa9 	bl	8005aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69d9      	ldr	r1, [r3, #28]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	021a      	lsls	r2, r3, #8
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	61da      	str	r2, [r3, #28]
      break;
 800558e:	e000      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005590:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_TIM_ConfigClockSource+0x18>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e0b3      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x180>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f4:	d03e      	beq.n	8005674 <HAL_TIM_ConfigClockSource+0xd0>
 80055f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fa:	f200 8087 	bhi.w	800570c <HAL_TIM_ConfigClockSource+0x168>
 80055fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005602:	f000 8085 	beq.w	8005710 <HAL_TIM_ConfigClockSource+0x16c>
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	d87f      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x168>
 800560c:	2b70      	cmp	r3, #112	; 0x70
 800560e:	d01a      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0xa2>
 8005610:	2b70      	cmp	r3, #112	; 0x70
 8005612:	d87b      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x168>
 8005614:	2b60      	cmp	r3, #96	; 0x60
 8005616:	d050      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x116>
 8005618:	2b60      	cmp	r3, #96	; 0x60
 800561a:	d877      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x168>
 800561c:	2b50      	cmp	r3, #80	; 0x50
 800561e:	d03c      	beq.n	800569a <HAL_TIM_ConfigClockSource+0xf6>
 8005620:	2b50      	cmp	r3, #80	; 0x50
 8005622:	d873      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x168>
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d058      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x136>
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d86f      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x168>
 800562c:	2b30      	cmp	r3, #48	; 0x30
 800562e:	d064      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x156>
 8005630:	2b30      	cmp	r3, #48	; 0x30
 8005632:	d86b      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x168>
 8005634:	2b20      	cmp	r3, #32
 8005636:	d060      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x156>
 8005638:	2b20      	cmp	r3, #32
 800563a:	d867      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x168>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d05c      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x156>
 8005640:	2b10      	cmp	r3, #16
 8005642:	d05a      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005644:	e062      	b.n	800570c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6899      	ldr	r1, [r3, #8]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f000 faee 	bl	8005c36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005668:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	609a      	str	r2, [r3, #8]
      break;
 8005672:	e04e      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6899      	ldr	r1, [r3, #8]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f000 fad7 	bl	8005c36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005696:	609a      	str	r2, [r3, #8]
      break;
 8005698:	e03b      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6859      	ldr	r1, [r3, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f000 fa4e 	bl	8005b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2150      	movs	r1, #80	; 0x50
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 faa5 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 80056b8:	e02b      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6859      	ldr	r1, [r3, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f000 fa6c 	bl	8005ba4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2160      	movs	r1, #96	; 0x60
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fa95 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 80056d8:	e01b      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6859      	ldr	r1, [r3, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f000 fa2e 	bl	8005b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2140      	movs	r1, #64	; 0x40
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fa85 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 80056f8:	e00b      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4619      	mov	r1, r3
 8005704:	4610      	mov	r0, r2
 8005706:	f000 fa7c 	bl	8005c02 <TIM_ITRx_SetConfig>
        break;
 800570a:	e002      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800570c:	bf00      	nop
 800570e:	e000      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005710:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr

0800573e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr

08005762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr

08005774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a29      	ldr	r2, [pc, #164]	; (800582c <TIM_Base_SetConfig+0xb8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00b      	beq.n	80057a4 <TIM_Base_SetConfig+0x30>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005792:	d007      	beq.n	80057a4 <TIM_Base_SetConfig+0x30>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a26      	ldr	r2, [pc, #152]	; (8005830 <TIM_Base_SetConfig+0xbc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_Base_SetConfig+0x30>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a25      	ldr	r2, [pc, #148]	; (8005834 <TIM_Base_SetConfig+0xc0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d108      	bne.n	80057b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a1c      	ldr	r2, [pc, #112]	; (800582c <TIM_Base_SetConfig+0xb8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00b      	beq.n	80057d6 <TIM_Base_SetConfig+0x62>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c4:	d007      	beq.n	80057d6 <TIM_Base_SetConfig+0x62>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a19      	ldr	r2, [pc, #100]	; (8005830 <TIM_Base_SetConfig+0xbc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d003      	beq.n	80057d6 <TIM_Base_SetConfig+0x62>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a18      	ldr	r2, [pc, #96]	; (8005834 <TIM_Base_SetConfig+0xc0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d108      	bne.n	80057e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a07      	ldr	r2, [pc, #28]	; (800582c <TIM_Base_SetConfig+0xb8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d103      	bne.n	800581c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	615a      	str	r2, [r3, #20]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr
 800582c:	40012c00 	.word	0x40012c00
 8005830:	40000400 	.word	0x40000400
 8005834:	40000800 	.word	0x40000800

08005838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f023 0201 	bic.w	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f023 0302 	bic.w	r3, r3, #2
 8005880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a1c      	ldr	r2, [pc, #112]	; (8005900 <TIM_OC1_SetConfig+0xc8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d10c      	bne.n	80058ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f023 0308 	bic.w	r3, r3, #8
 800589a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f023 0304 	bic.w	r3, r3, #4
 80058ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a13      	ldr	r2, [pc, #76]	; (8005900 <TIM_OC1_SetConfig+0xc8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d111      	bne.n	80058da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	621a      	str	r2, [r3, #32]
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40012c00 	.word	0x40012c00

08005904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0210 	bic.w	r2, r3, #16
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0320 	bic.w	r3, r3, #32
 800594e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <TIM_OC2_SetConfig+0xd0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d10d      	bne.n	8005980 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800596a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <TIM_OC2_SetConfig+0xd0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d113      	bne.n	80059b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800598e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr
 80059d4:	40012c00 	.word	0x40012c00

080059d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1d      	ldr	r2, [pc, #116]	; (8005aa8 <TIM_OC3_SetConfig+0xd0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d10d      	bne.n	8005a52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <TIM_OC3_SetConfig+0xd0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d113      	bne.n	8005a82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	621a      	str	r2, [r3, #32]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40012c00 	.word	0x40012c00

08005aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	031b      	lsls	r3, r3, #12
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a0f      	ldr	r2, [pc, #60]	; (8005b44 <TIM_OC4_SetConfig+0x98>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d109      	bne.n	8005b20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	019b      	lsls	r3, r3, #6
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	621a      	str	r2, [r3, #32]
}
 8005b3a:	bf00      	nop
 8005b3c:	371c      	adds	r7, #28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr
 8005b44:	40012c00 	.word	0x40012c00

08005b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f023 0201 	bic.w	r2, r3, #1
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f023 030a 	bic.w	r3, r3, #10
 8005b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr

08005ba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f023 0210 	bic.w	r2, r3, #16
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	031b      	lsls	r3, r3, #12
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005be0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	621a      	str	r2, [r3, #32]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr

08005c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f043 0307 	orr.w	r3, r3, #7
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	609a      	str	r2, [r3, #8]
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr

08005c36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b087      	sub	sp, #28
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	021a      	lsls	r2, r3, #8
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	609a      	str	r2, [r3, #8]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2201      	movs	r2, #1
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1a      	ldr	r2, [r3, #32]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	401a      	ands	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1a      	ldr	r2, [r3, #32]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f003 031f 	and.w	r3, r3, #31
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cac:	431a      	orrs	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e046      	b.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a16      	ldr	r2, [pc, #88]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00e      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d20:	d009      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a12      	ldr	r2, [pc, #72]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a10      	ldr	r2, [pc, #64]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d10c      	bne.n	8005d50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40000400 	.word	0x40000400
 8005d74:	40000800 	.word	0x40000800

08005d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e03d      	b.n	8005e10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr

08005e1a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr
	...

08005e40 <__libc_init_array>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	2600      	movs	r6, #0
 8005e44:	4d0c      	ldr	r5, [pc, #48]	; (8005e78 <__libc_init_array+0x38>)
 8005e46:	4c0d      	ldr	r4, [pc, #52]	; (8005e7c <__libc_init_array+0x3c>)
 8005e48:	1b64      	subs	r4, r4, r5
 8005e4a:	10a4      	asrs	r4, r4, #2
 8005e4c:	42a6      	cmp	r6, r4
 8005e4e:	d109      	bne.n	8005e64 <__libc_init_array+0x24>
 8005e50:	f000 f822 	bl	8005e98 <_init>
 8005e54:	2600      	movs	r6, #0
 8005e56:	4d0a      	ldr	r5, [pc, #40]	; (8005e80 <__libc_init_array+0x40>)
 8005e58:	4c0a      	ldr	r4, [pc, #40]	; (8005e84 <__libc_init_array+0x44>)
 8005e5a:	1b64      	subs	r4, r4, r5
 8005e5c:	10a4      	asrs	r4, r4, #2
 8005e5e:	42a6      	cmp	r6, r4
 8005e60:	d105      	bne.n	8005e6e <__libc_init_array+0x2e>
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e68:	4798      	blx	r3
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	e7ee      	b.n	8005e4c <__libc_init_array+0xc>
 8005e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e72:	4798      	blx	r3
 8005e74:	3601      	adds	r6, #1
 8005e76:	e7f2      	b.n	8005e5e <__libc_init_array+0x1e>
 8005e78:	08006408 	.word	0x08006408
 8005e7c:	08006408 	.word	0x08006408
 8005e80:	08006408 	.word	0x08006408
 8005e84:	0800640c 	.word	0x0800640c

08005e88 <memset>:
 8005e88:	4603      	mov	r3, r0
 8005e8a:	4402      	add	r2, r0
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d100      	bne.n	8005e92 <memset+0xa>
 8005e90:	4770      	bx	lr
 8005e92:	f803 1b01 	strb.w	r1, [r3], #1
 8005e96:	e7f9      	b.n	8005e8c <memset+0x4>

08005e98 <_init>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr

08005ea4 <_fini>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	bf00      	nop
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr
